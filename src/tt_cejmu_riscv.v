/* Generated by Yosys 0.34+43 (git sha1 d21c464ae, clang 10.0.0-4ubuntu1 -fPIC -Os) */

module alu(clk, reset, a, b, instruction, rd);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  wire _13_;
  wire _14_;
  wire [31:0] _15_;
  wire _16_;
  wire _17_;
  wire _18_;
  wire _19_;
  wire _20_;
  wire [31:0] _21_;
  wire _22_;
  wire _23_;
  wire _24_;
  wire _25_;
  wire _26_;
  wire [31:0] _27_;
  wire _28_;
  wire _29_;
  wire _30_;
  wire _31_;
  wire _32_;
  wire [1:0] _33_;
  wire [31:0] _34_;
  wire [31:0] _35_;
  wire [31:0] _36_;
  wire [31:0] _37_;
  wire [31:0] _38_;
  wire [31:0] _39_;
  reg [31:0] _40_;
  input [31:0] a;
  wire [31:0] a;
  input [31:0] b;
  wire [31:0] b;
  input clk;
  wire clk;
  input [16:0] instruction;
  wire [16:0] instruction;
  output [31:0] rd;
  wire [31:0] rd;
  input reset;
  wire reset;
  assign _00_ = instruction[16:10] == 7'h00;
  assign _01_ = instruction[9:7] == 3'h0;
  assign _02_ = _01_ & _00_;
  assign _03_ = instruction[6:0] == 7'h33;
  assign _04_ = _03_ & _02_;
  assign _05_ = instruction[9:7] == 3'h0;
  assign _06_ = instruction[6:0] == 7'h13;
  assign _07_ = _06_ & _05_;
  assign _08_ = _04_ | _07_;
  assign _09_ = instruction[6:0] == 7'h23;
  assign _10_ = instruction[6:0] == 7'h03;
  assign _11_ = _09_ | _10_;
  assign _12_ = instruction[9:7] == 3'h2;
  assign _13_ = _12_ & _11_;
  assign _14_ = _08_ | _13_;
  assign _15_ = a + b;
  assign _16_ = instruction[16:10] == 7'h00;
  assign _17_ = instruction[9:7] == 3'h7;
  assign _18_ = _17_ & _16_;
  assign _19_ = instruction[6:0] == 7'h33;
  assign _20_ = _19_ & _18_;
  assign _21_ = a & b;
  assign _22_ = instruction[16:10] == 7'h00;
  assign _23_ = instruction[9:7] == 3'h4;
  assign _24_ = _23_ & _22_;
  assign _25_ = instruction[6:0] == 7'h33;
  assign _26_ = _25_ & _24_;
  assign _27_ = a ^ b;
  assign _28_ = instruction[6:0] == 7'h6f;
  assign _29_ = instruction[6:0] == 7'h63;
  assign _30_ = instruction[9:7] == 3'h1;
  assign _31_ = _30_ & _29_;
  assign _32_ = a == b;
  assign _33_ = _32_ ? 2'h2 : 2'h0;
  assign _34_ = _31_ ? { 14'h0000, _33_, 16'h0000 } : 32'd0;
  assign _35_ = _28_ ? 32'd0 : _34_;
  assign _36_ = _26_ ? _27_ : _35_;
  assign _37_ = _20_ ? _21_ : _36_;
  assign _38_ = _14_ ? _15_ : _37_;
  assign _39_ = reset ? 32'd0 : _38_;
  always @(posedge clk)
    _40_ <= _39_;
  assign rd = _40_;
endmodule

module control(clk, reset, iword, imm, control_flags_out, wbflag, memflag, pcflag, fetchflag);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire [2:0] _11_;
  wire [2:0] _12_;
  wire [2:0] _13_;
  wire [2:0] _14_;
  wire [2:0] _15_;
  wire [31:0] _16_;
  wire [2:0] _17_;
  wire [31:0] _18_;
  wire _19_;
  wire _20_;
  wire _21_;
  wire _22_;
  wire _23_;
  wire _24_;
  wire _25_;
  wire _26_;
  wire _27_;
  wire _28_;
  wire _29_;
  wire _30_;
  wire _31_;
  wire _32_;
  wire _33_;
  wire _34_;
  wire _35_;
  wire _36_;
  wire _37_;
  wire _38_;
  wire _39_;
  wire _40_;
  wire _41_;
  wire _42_;
  wire _43_;
  wire _44_;
  wire _45_;
  wire [31:0] _46_;
  wire _47_;
  wire [31:0] _48_;
  wire _49_;
  wire [31:0] _50_;
  wire _51_;
  wire [31:0] _52_;
  wire _53_;
  wire _54_;
  wire _55_;
  wire _56_;
  wire _57_;
  wire _58_;
  wire _59_;
  wire _60_;
  wire _61_;
  wire _62_;
  wire _63_;
  wire _64_;
  wire _65_;
  wire _66_;
  wire _67_;
  wire _68_;
  wire _69_;
  wire _70_;
  wire _71_;
  wire _72_;
  wire _73_;
  wire _74_;
  wire _75_;
  wire _76_;
  wire _77_;
  wire _78_;
  wire _79_;
  wire _80_;
  wire _81_;
  wire _82_;
  wire _83_;
  wire _84_;
  wire _85_;
  wire _86_;
  reg [2:0] _87_;
  wire _88_;
  wire [31:0] _89_;
  reg [31:0] _90_;
  input clk;
  wire clk;
  wire [4:0] control_flags;
  output [4:0] control_flags_out;
  wire [4:0] control_flags_out;
  wire [2:0] currstate;
  output fetchflag;
  wire fetchflag;
  output [31:0] imm;
  wire [31:0] imm;
  input [31:0] iword;
  wire [31:0] iword;
  wire [31:0] iword_reg;
  output memflag;
  wire memflag;
  output pcflag;
  wire pcflag;
  input reset;
  wire reset;
  wire [20:0] w31_to_w11;
  output wbflag;
  wire wbflag;
  assign _00_ = currstate == 3'h0;
  assign _01_ = currstate == 3'h5;
  assign _02_ = currstate == 3'h1;
  assign _03_ = currstate == 3'h2;
  assign _04_ = currstate == 3'h3;
  assign _05_ = control_flags[0] & _04_;
  assign _06_ = currstate == 3'h4;
  assign _07_ = currstate == 3'h3;
  assign _08_ = ~ control_flags[0];
  assign _09_ = _08_ & _07_;
  assign _10_ = _06_ | _09_;
  assign _11_ = _10_ ? 3'h5 : currstate;
  assign _12_ = _05_ ? 3'h4 : _11_;
  assign _13_ = _03_ ? 3'h3 : _12_;
  assign _14_ = _02_ ? 3'h2 : _13_;
  assign _15_ = _01_ ? 3'h1 : _14_;
  assign _16_ = _01_ ? iword : iword_reg;
  assign _17_ = _00_ ? 3'h1 : _15_;
  assign _18_ = _00_ ? iword : _16_;
  assign _19_ = currstate == 3'h3;
  assign _20_ = ~ control_flags[0];
  assign _21_ = _20_ & _19_;
  assign _22_ = currstate == 3'h4;
  assign _23_ = _21_ | _22_;
  assign _24_ = _23_ ? 1'h1 : 1'h0;
  assign _25_ = currstate == 3'h3;
  assign _26_ = control_flags[0] & _25_;
  assign _27_ = control_flags[1] & _26_;
  assign _28_ = _27_ ? 1'h1 : 1'h0;
  assign _29_ = currstate == 3'h4;
  assign _30_ = control_flags[2] & _29_;
  assign _31_ = currstate == 3'h3;
  assign _32_ = control_flags[2] & _31_;
  assign _33_ = ~ control_flags[0];
  assign _34_ = _33_ & _32_;
  assign _35_ = _30_ | _34_;
  assign _36_ = _35_ ? 1'h1 : 1'h0;
  assign _37_ = currstate == 3'h0;
  assign _38_ = currstate == 3'h5;
  assign _39_ = _37_ | _38_;
  assign _40_ = _39_ ? 1'h1 : 1'h0;
  assign _41_ = iword_reg[6:0] == 7'h03;
  assign _42_ = iword_reg[6:0] == 7'h13;
  assign _43_ = _41_ | _42_;
  assign _44_ = iword_reg[6:0] == 7'h67;
  assign _45_ = _43_ | _44_;
  assign _46_ = _45_ ? { w31_to_w11, iword_reg[30:20] } : _48_;
  assign _47_ = iword_reg[6:0] == 7'h23;
  assign _48_ = _47_ ? { w31_to_w11, iword_reg[30:25], iword_reg[11:7] } : _50_;
  assign _49_ = iword_reg[6:0] == 7'h63;
  assign _50_ = _49_ ? { w31_to_w11[20:1], iword_reg[7], iword_reg[30:25], iword_reg[11:8], 1'h0 } : _52_;
  assign _51_ = iword_reg[6:0] == 7'h6f;
  assign _52_ = _51_ ? { w31_to_w11[11:0], iword_reg[19:12], iword_reg[20], iword_reg[30:21], 1'h0 } : 32'd0;
  assign _53_ = iword_reg[6:0] == 7'h03;
  assign _54_ = iword_reg[6:0] == 7'h23;
  assign _55_ = _53_ | _54_;
  assign _56_ = iword_reg[14:12] == 3'h2;
  assign _57_ = _56_ & _55_;
  assign _58_ = _57_ ? 1'h1 : 1'h0;
  assign _59_ = iword_reg[6:0] == 7'h23;
  assign _60_ = iword_reg[14:12] == 3'h2;
  assign _61_ = _60_ & _59_;
  assign _62_ = _61_ ? 1'h1 : 1'h0;
  assign _63_ = iword_reg[6:0] == 7'h63;
  assign _64_ = _63_ ? 1'h0 : 1'h1;
  assign _65_ = iword_reg[6:0] == 7'h13;
  assign _66_ = iword_reg[6:0] == 7'h37;
  assign _67_ = _65_ | _66_;
  assign _68_ = iword_reg[6:0] == 7'h17;
  assign _69_ = _67_ | _68_;
  assign _70_ = iword_reg[6:0] == 7'h03;
  assign _71_ = iword_reg[6:0] == 7'h23;
  assign _72_ = _70_ | _71_;
  assign _73_ = iword_reg[14:12] == 3'h2;
  assign _74_ = _73_ & _72_;
  assign _75_ = _69_ | _74_;
  assign _76_ = iword_reg[6:0] == 7'h6f;
  assign _77_ = _75_ | _76_;
  assign _78_ = iword_reg[6:0] == 7'h67;
  assign _79_ = _77_ | _78_;
  assign _80_ = _79_ ? 1'h1 : 1'h0;
  assign _81_ = iword_reg[6:0] == 7'h63;
  assign _82_ = iword_reg[6:0] == 7'h6f;
  assign _83_ = _81_ | _82_;
  assign _84_ = iword_reg[6:0] == 7'h67;
  assign _85_ = _83_ | _84_;
  assign _86_ = _85_ ? 1'h1 : 1'h0;
  always @(posedge clk, posedge reset)
    if (reset) _87_ <= 3'h0;
    else _87_ <= _17_;
  assign _88_ = ~ reset;
  assign _89_ = _88_ ? _18_ : iword_reg;
  always @(posedge clk)
    _90_ <= _89_;
  assign currstate = _87_;
  assign control_flags = { _86_, _80_, _64_, _62_, _58_ };
  assign w31_to_w11 = { iword_reg[31], iword_reg[31], iword_reg[31], iword_reg[31], iword_reg[31], iword_reg[31], iword_reg[31], iword_reg[31], iword_reg[31], iword_reg[31], iword_reg[31], iword_reg[31], iword_reg[31], iword_reg[31], iword_reg[31], iword_reg[31], iword_reg[31], iword_reg[31], iword_reg[31], iword_reg[31], iword_reg[31] };
  assign iword_reg = _90_;
  assign imm = _46_;
  assign control_flags_out = control_flags;
  assign wbflag = _36_;
  assign memflag = _28_;
  assign pcflag = _24_;
  assign fetchflag = _40_;
endmodule

module cpu(clk, reset, data_in, data_out, addr_out, write_en);
  wire [31:0] _00_;
  wire [31:0] _01_;
  wire [31:0] _02_;
  wire [31:0] _03_;
  wire [4:0] _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire [31:0] _09_;
  wire [31:0] _10_;
  wire [31:0] _11_;
  wire _12_;
  wire _13_;
  wire [15:0] _14_;
  wire [15:0] _15_;
  wire [13:0] _16_;
  output [13:0] addr_out;
  wire [13:0] addr_out;
  wire [31:0] b;
  input clk;
  wire clk;
  wire [4:0] control_flags_out;
  input [31:0] data_in;
  wire [31:0] data_in;
  output [31:0] data_out;
  wire [31:0] data_out;
  wire fetchflag;
  wire [31:0] imm;
  wire [16:0] instruction;
  wire memflag;
  wire [15:0] pc_inc;
  wire [15:0] pc_out;
  wire pcflag;
  wire [31:0] rd;
  wire [31:0] rdalu;
  input reset;
  wire reset;
  wire [31:0] rs1;
  wire [31:0] rs2;
  wire s0;
  wire s1;
  wire wbflag;
  output write_en;
  wire write_en;
  assign _09_ = control_flags_out[3] ? imm : rs2;
  assign _10_ = control_flags_out[4] ? { 16'h0000, pc_inc } : _11_;
  assign _11_ = control_flags_out[0] ? data_in : rdalu;
  assign _12_ = control_flags_out[4] ? rdalu[16] : 1'h0;
  assign _13_ = control_flags_out[4] ? rdalu[17] : 1'h1;
  assign _16_ = fetchflag ? pc_out[15:2] : rdalu[13:0];
  alu alu_inst (
    .a(rs1),
    .b(b),
    .clk(clk),
    .instruction(instruction),
    .rd(_02_),
    .reset(reset)
  );
  control control_inst (
    .clk(clk),
    .control_flags_out(_04_),
    .fetchflag(_08_),
    .imm(_03_),
    .iword(data_in),
    .memflag(_06_),
    .pcflag(_07_),
    .reset(reset),
    .wbflag(_05_)
  );
  instructioncounter instruction_inst (
    .clk(clk),
    .pc_inc(_14_),
    .pc_new(_15_),
    .pc_offset(imm[15:0]),
    .pcflag(pcflag),
    .reset(reset),
    .s0(s0),
    .s1(s1)
  );
  regs regs_inst (
    .clk(clk),
    .rd(rd),
    .rdadr(data_in[11:7]),
    .regwrite(wbflag),
    .reset(reset),
    .rs1(_00_),
    .rs1adr(data_in[19:15]),
    .rs2(_01_),
    .rs2adr(data_in[24:20])
  );
  assign s0 = _12_;
  assign s1 = _13_;
  assign imm = _03_;
  assign control_flags_out = _04_;
  assign rs1 = _00_;
  assign rs2 = _01_;
  assign b = _09_;
  assign rdalu = _02_;
  assign rd = _10_;
  assign wbflag = _05_;
  assign memflag = _06_;
  assign pcflag = _07_;
  assign fetchflag = _08_;
  assign instruction = { data_in[31:25], data_in[14:12], data_in[6:0] };
  assign pc_inc = _14_;
  assign pc_out = _15_;
  assign data_out = rs2;
  assign addr_out = _16_;
  assign write_en = memflag;
endmodule

module instructioncounter(clk, reset, pcflag, s0, s1, pc_offset, pc_inc, pc_new);
  wire [15:0] _00_;
  wire [15:0] _01_;
  wire _02_;
  wire [15:0] _03_;
  wire _04_;
  wire _05_;
  wire [15:0] _06_;
  wire [15:0] _07_;
  wire [15:0] _08_;
  reg [15:0] _09_ = 16'h0000;
  reg [15:0] _10_;
  input clk;
  wire clk;
  output [15:0] pc_inc;
  wire [15:0] pc_inc;
  output [15:0] pc_new;
  wire [15:0] pc_new;
  input [15:0] pc_offset;
  wire [15:0] pc_offset;
  input pcflag;
  wire pcflag;
  wire [15:0] \reg ;
  input reset;
  wire reset;
  input s0;
  wire s0;
  input s1;
  wire s1;
  wire [1:0] s1s0;
  assign _00_ = \reg  + 16'h0004;
  assign _01_ = pc_offset + \reg ;
  assign _02_ = s1s0 == 2'h0;
  assign _03_ = \reg  + 16'h0004;
  assign _04_ = s1s0 == 2'h2;
  assign _05_ = s1s0 == 2'h1;
  function [15:0] \773 ;
    input [15:0] a;
    input [47:0] b;
    input [2:0] s;
    (* parallel_case *)
    casez (s)
      3'b??1:
        \773  = b[15:0];
      3'b?1?:
        \773  = b[31:16];
      3'b1??:
        \773  = b[47:32];
      default:
        \773  = a;
    endcase
  endfunction
  assign _06_ = \773 (16'h0000, { pc_offset, _03_, _01_ }, { _05_, _04_, _02_ });
  assign _07_ = pcflag ? _06_ : \reg ;
  assign _08_ = reset ? 16'h0000 : _07_;
  always @(posedge clk)
    _09_ <= _08_;
  always @(posedge clk)
    _10_ <= _00_;
  assign s1s0 = { s1, s0 };
  assign \reg  = _09_;
  assign pc_inc = _10_;
  assign pc_new = \reg ;
endmodule

module memory(clk, reset, addr, datain, write_en, dataout);
  wire [511:0] _0_;
  wire [31:0] _1_;
  input [3:0] addr;
  wire [3:0] addr;
  input clk;
  wire clk;
  input [31:0] datain;
  wire [31:0] datain;
  output [31:0] dataout;
  wire [31:0] dataout;
  input reset;
  wire reset;
  input write_en;
  wire write_en;
  reg [31:0] mem [15:0];
  initial begin
    mem[0] = 32'd0;
    mem[1] = 32'd0;
    mem[2] = 32'd0;
    mem[3] = 32'd0;
    mem[4] = 32'd0;
    mem[5] = 32'd0;
    mem[6] = 32'd0;
    mem[7] = 32'd0;
    mem[8] = 32'd0;
    mem[9] = 32'd0;
    mem[10] = 32'd0;
    mem[11] = 32'd0;
    mem[12] = 32'd0;
    mem[13] = 32'd0;
    mem[14] = 32'd0;
    mem[15] = 32'd0;
  end
  always @(posedge clk) begin
    if (write_en)
      mem[addr] <= datain;
  end
  reg [31:0] _2_;
  always @(posedge clk) begin
    _2_ <= mem[addr];
  end
  assign _1_ = _2_;
  assign dataout = _1_;
endmodule

module regs(clk, reset, rs1adr, rs2adr, rdadr, rd, regwrite, rs1, rs2);
  wire _0_;
  wire _1_;
  wire _2_;
  wire _3_;
  reg [31:0] _4_;
  reg [31:0] _5_;
  wire [1023:0] _6_;
  wire [31:0] _7_;
  wire [1023:0] _8_;
  wire [31:0] _9_;
  input clk;
  wire clk;
  input [31:0] rd;
  wire [31:0] rd;
  input [4:0] rdadr;
  wire [4:0] rdadr;
  input regwrite;
  wire regwrite;
  input reset;
  wire reset;
  output [31:0] rs1;
  wire [31:0] rs1;
  input [4:0] rs1adr;
  wire [4:0] rs1adr;
  output [31:0] rs2;
  wire [31:0] rs2;
  input [4:0] rs2adr;
  wire [4:0] rs2adr;
  reg [31:0] registers [31:0];
  initial begin
    registers[0] = 32'd0;
    registers[1] = 32'd0;
    registers[2] = 32'd0;
    registers[3] = 32'd0;
    registers[4] = 32'd0;
    registers[5] = 32'd0;
    registers[6] = 32'd0;
    registers[7] = 32'd0;
    registers[8] = 32'd0;
    registers[9] = 32'd0;
    registers[10] = 32'd0;
    registers[11] = 32'd0;
    registers[12] = 32'd0;
    registers[13] = 32'd0;
    registers[14] = 32'd0;
    registers[15] = 32'd0;
    registers[16] = 32'd0;
    registers[17] = 32'd0;
    registers[18] = 32'd0;
    registers[19] = 32'd0;
    registers[20] = 32'd0;
    registers[21] = 32'd0;
    registers[22] = 32'd0;
    registers[23] = 32'd0;
    registers[24] = 32'd0;
    registers[25] = 32'd0;
    registers[26] = 32'd0;
    registers[27] = 32'd0;
    registers[28] = 32'd0;
    registers[29] = 32'd0;
    registers[30] = 32'd0;
    registers[31] = 32'd0;
  end
  always @(posedge clk) begin
    if (_3_)
      registers[rdadr] <= rd;
  end
  assign _9_ = registers[rs1adr];
  assign _7_ = registers[rs2adr];
  assign _0_ = rdadr != 5'h00;
  assign _1_ = _0_ & regwrite;
  assign _2_ = ~ reset;
  assign _3_ = _1_ & _2_;
  always @(posedge clk, posedge reset)
    if (reset) _4_ <= 32'd0;
    else _4_ <= _9_;
  always @(posedge clk, posedge reset)
    if (reset) _5_ <= 32'd0;
    else _5_ <= _7_;
  assign rs1 = _4_;
  assign rs2 = _5_;
endmodule

module spi_slave(sclk, mosi, cs, addr, dataout, data_valid);
  wire _000_;
  wire _001_;
  wire _002_;
  wire _003_;
  wire _004_;
  wire _005_;
  wire _006_;
  wire _007_;
  wire _008_;
  wire _009_;
  wire _010_;
  wire _011_;
  wire _012_;
  wire _013_;
  wire _014_;
  wire _015_;
  wire _016_;
  wire _017_;
  wire _018_;
  wire _019_;
  wire _020_;
  wire _021_;
  wire _022_;
  wire _023_;
  wire _024_;
  wire _025_;
  wire _026_;
  wire _027_;
  wire _028_;
  wire _029_;
  wire _030_;
  wire _031_;
  wire _032_;
  wire _033_;
  wire _034_;
  wire _035_;
  wire _036_;
  wire _037_;
  wire _038_;
  wire _039_;
  wire _040_;
  wire _041_;
  wire _042_;
  wire _043_;
  wire _044_;
  wire _045_;
  wire _046_;
  wire _047_;
  wire _048_;
  wire _049_;
  wire _050_;
  wire _051_;
  wire _052_;
  wire _053_;
  wire _054_;
  wire _055_;
  wire _056_;
  wire _057_;
  wire _058_;
  wire _059_;
  wire _060_;
  wire _061_;
  wire _062_;
  wire _063_;
  wire _064_;
  wire _065_;
  wire _066_;
  wire _067_;
  wire _068_;
  wire _069_;
  wire _070_;
  wire _071_;
  wire _072_;
  wire _073_;
  wire _074_;
  wire _075_;
  wire _076_;
  wire _077_;
  wire _078_;
  wire _079_;
  wire _080_;
  wire _081_;
  wire _082_;
  wire _083_;
  wire _084_;
  wire _085_;
  wire _086_;
  wire _087_;
  wire _088_;
  wire _089_;
  wire _090_;
  wire _091_;
  wire _092_;
  wire _093_;
  wire _094_;
  wire _095_;
  wire _096_;
  wire _097_;
  wire _098_;
  wire _099_;
  wire _100_;
  wire _101_;
  wire _102_;
  wire _103_;
  wire _104_;
  wire _105_;
  wire _106_;
  wire [4:0] _107_;
  wire [4:0] _108_;
  wire _109_;
  wire _110_;
  wire [4:0] _111_;
  wire [4:0] _112_;
  wire _113_;
  wire [31:0] _114_;
  wire [13:0] _115_;
  wire [30:0] _116_;
  wire _117_;
  wire [4:0] _118_;
  wire _119_;
  wire [31:0] _120_;
  wire [13:0] _121_;
  wire [30:0] _122_;
  wire [13:0] _123_;
  wire _124_;
  wire [4:0] _125_;
  wire _126_;
  wire [31:0] _127_;
  wire [13:0] _128_;
  wire [30:0] _129_;
  wire [13:0] _130_;
  wire _131_;
  reg [4:0] _132_ = 5'h00;
  reg _133_ = 1'h0;
  reg [31:0] _134_ = 32'd0;
  reg [13:0] _135_ = 14'h0000;
  reg [30:0] _136_ = 31'h00000000;
  reg [13:0] _137_ = 14'h0000;
  reg _138_ = 1'h0;
  wire _139_;
  wire _140_;
  wire _141_;
  wire _142_;
  wire _143_;
  wire _144_;
  wire _145_;
  wire _146_;
  wire _147_;
  wire _148_;
  wire _149_;
  wire _150_;
  wire _151_;
  wire _152_;
  wire _153_;
  wire _154_;
  wire _155_;
  wire _156_;
  wire _157_;
  wire _158_;
  wire _159_;
  wire _160_;
  wire _161_;
  wire _162_;
  wire _163_;
  wire _164_;
  wire _165_;
  wire _166_;
  wire _167_;
  wire _168_;
  wire _169_;
  wire _170_;
  wire _171_;
  output [13:0] addr;
  wire [13:0] addr;
  wire [13:0] addr_output_register;
  wire [13:0] addr_register;
  wire [4:0] counter;
  input cs;
  wire cs;
  wire [31:0] data_output_register;
  wire [30:0] data_register;
  output data_valid;
  wire data_valid;
  wire data_valid_reg;
  output [31:0] dataout;
  wire [31:0] dataout;
  input mosi;
  wire mosi;
  input sclk;
  wire sclk;
  wire state;
  assign _105_ = state == 1'h0;
  assign _106_ = counter >= 5'h0d;
  assign _107_ = counter + 5'h01;
  assign _108_ = _106_ ? 5'h00 : _107_;
  assign _109_ = _106_ ? 1'h1 : state;
  assign _110_ = counter == 5'h1f;
  assign _111_ = counter + 5'h01;
  assign _112_ = _110_ ? 5'h00 : _111_;
  assign _113_ = _110_ ? 1'h1 : data_valid_reg;
  assign _114_ = _110_ ? { data_register[7:0], data_register[15:8], data_register[23:16], mosi, data_register[30:24] } : data_output_register;
  assign _115_ = _110_ ? addr_register : addr_output_register;
  assign _116_ = _110_ ? data_register : { _104_, _103_, _102_, _101_, _100_, _099_, _098_, _097_, _096_, _095_, _094_, _093_, _092_, _091_, _090_, _089_, _088_, _087_, _086_, _085_, _084_, _083_, _082_, _081_, _080_, _079_, _078_, _077_, _076_, _075_, _074_ };
  assign _117_ = _110_ ? 1'h0 : state;
  assign _118_ = _105_ ? _108_ : _112_;
  assign _119_ = _105_ ? data_valid_reg : _113_;
  assign _120_ = _105_ ? data_output_register : _114_;
  assign _121_ = _105_ ? addr_output_register : _115_;
  assign _122_ = _105_ ? data_register : _116_;
  assign _123_ = _105_ ? { _009_, _008_, _007_, _006_, _005_, _004_, _003_, _002_, _001_, _000_, _171_, _170_, _169_, _168_ } : addr_register;
  assign _124_ = _105_ ? _109_ : _117_;
  assign _125_ = cs ? 5'h00 : _118_;
  assign _126_ = cs ? 1'h0 : _119_;
  assign _127_ = cs ? 32'd0 : _120_;
  assign _128_ = cs ? 14'h0000 : _121_;
  assign _129_ = cs ? 31'h00000000 : _122_;
  assign _130_ = cs ? 14'h0000 : _123_;
  assign _131_ = cs ? 1'h0 : _124_;
  always @(posedge sclk)
    _132_ <= _125_;
  always @(posedge sclk)
    _133_ <= _126_;
  always @(posedge sclk)
    _134_ <= _127_;
  always @(posedge sclk)
    _135_ <= _128_;
  always @(posedge sclk)
    _136_ <= _129_;
  always @(posedge sclk)
    _137_ <= _130_;
  always @(posedge sclk)
    _138_ <= _131_;
  assign _139_ = ~ counter[3];
  assign _140_ = ~ counter[2];
  assign _141_ = _139_ & _140_;
  assign _142_ = _139_ & counter[2];
  assign _143_ = counter[3] & _140_;
  assign _144_ = counter[3] & counter[2];
  assign _145_ = ~ counter[1];
  assign _146_ = _141_ & _145_;
  assign _147_ = _141_ & counter[1];
  assign _148_ = _142_ & _145_;
  assign _149_ = _142_ & counter[1];
  assign _150_ = _143_ & _145_;
  assign _151_ = _143_ & counter[1];
  assign _152_ = _144_ & _145_;
  assign _153_ = ~ counter[0];
  assign _154_ = _146_ & _153_;
  assign _155_ = _146_ & counter[0];
  assign _156_ = _147_ & _153_;
  assign _157_ = _147_ & counter[0];
  assign _158_ = _148_ & _153_;
  assign _159_ = _148_ & counter[0];
  assign _160_ = _149_ & _153_;
  assign _161_ = _149_ & counter[0];
  assign _162_ = _150_ & _153_;
  assign _163_ = _150_ & counter[0];
  assign _164_ = _151_ & _153_;
  assign _165_ = _151_ & counter[0];
  assign _166_ = _152_ & _153_;
  assign _167_ = _152_ & counter[0];
  assign _168_ = _154_ ? mosi : addr_register[0];
  assign _169_ = _155_ ? mosi : addr_register[1];
  assign _170_ = _156_ ? mosi : addr_register[2];
  assign _171_ = _157_ ? mosi : addr_register[3];
  assign _000_ = _158_ ? mosi : addr_register[4];
  assign _001_ = _159_ ? mosi : addr_register[5];
  assign _002_ = _160_ ? mosi : addr_register[6];
  assign _003_ = _161_ ? mosi : addr_register[7];
  assign _004_ = _162_ ? mosi : addr_register[8];
  assign _005_ = _163_ ? mosi : addr_register[9];
  assign _006_ = _164_ ? mosi : addr_register[10];
  assign _007_ = _165_ ? mosi : addr_register[11];
  assign _008_ = _166_ ? mosi : addr_register[12];
  assign _009_ = _167_ ? mosi : addr_register[13];
  assign _010_ = ~ counter[4];
  assign _011_ = ~ counter[3];
  assign _012_ = _010_ & _011_;
  assign _013_ = _010_ & counter[3];
  assign _014_ = counter[4] & _011_;
  assign _015_ = counter[4] & counter[3];
  assign _016_ = ~ counter[2];
  assign _017_ = _012_ & _016_;
  assign _018_ = _012_ & counter[2];
  assign _019_ = _013_ & _016_;
  assign _020_ = _013_ & counter[2];
  assign _021_ = _014_ & _016_;
  assign _022_ = _014_ & counter[2];
  assign _023_ = _015_ & _016_;
  assign _024_ = _015_ & counter[2];
  assign _025_ = ~ counter[1];
  assign _026_ = _017_ & _025_;
  assign _027_ = _017_ & counter[1];
  assign _028_ = _018_ & _025_;
  assign _029_ = _018_ & counter[1];
  assign _030_ = _019_ & _025_;
  assign _031_ = _019_ & counter[1];
  assign _032_ = _020_ & _025_;
  assign _033_ = _020_ & counter[1];
  assign _034_ = _021_ & _025_;
  assign _035_ = _021_ & counter[1];
  assign _036_ = _022_ & _025_;
  assign _037_ = _022_ & counter[1];
  assign _038_ = _023_ & _025_;
  assign _039_ = _023_ & counter[1];
  assign _040_ = _024_ & _025_;
  assign _041_ = _024_ & counter[1];
  assign _042_ = ~ counter[0];
  assign _043_ = _026_ & _042_;
  assign _044_ = _026_ & counter[0];
  assign _045_ = _027_ & _042_;
  assign _046_ = _027_ & counter[0];
  assign _047_ = _028_ & _042_;
  assign _048_ = _028_ & counter[0];
  assign _049_ = _029_ & _042_;
  assign _050_ = _029_ & counter[0];
  assign _051_ = _030_ & _042_;
  assign _052_ = _030_ & counter[0];
  assign _053_ = _031_ & _042_;
  assign _054_ = _031_ & counter[0];
  assign _055_ = _032_ & _042_;
  assign _056_ = _032_ & counter[0];
  assign _057_ = _033_ & _042_;
  assign _058_ = _033_ & counter[0];
  assign _059_ = _034_ & _042_;
  assign _060_ = _034_ & counter[0];
  assign _061_ = _035_ & _042_;
  assign _062_ = _035_ & counter[0];
  assign _063_ = _036_ & _042_;
  assign _064_ = _036_ & counter[0];
  assign _065_ = _037_ & _042_;
  assign _066_ = _037_ & counter[0];
  assign _067_ = _038_ & _042_;
  assign _068_ = _038_ & counter[0];
  assign _069_ = _039_ & _042_;
  assign _070_ = _039_ & counter[0];
  assign _071_ = _040_ & _042_;
  assign _072_ = _040_ & counter[0];
  assign _073_ = _041_ & _042_;
  assign _074_ = _043_ ? mosi : data_register[0];
  assign _075_ = _044_ ? mosi : data_register[1];
  assign _076_ = _045_ ? mosi : data_register[2];
  assign _077_ = _046_ ? mosi : data_register[3];
  assign _078_ = _047_ ? mosi : data_register[4];
  assign _079_ = _048_ ? mosi : data_register[5];
  assign _080_ = _049_ ? mosi : data_register[6];
  assign _081_ = _050_ ? mosi : data_register[7];
  assign _082_ = _051_ ? mosi : data_register[8];
  assign _083_ = _052_ ? mosi : data_register[9];
  assign _084_ = _053_ ? mosi : data_register[10];
  assign _085_ = _054_ ? mosi : data_register[11];
  assign _086_ = _055_ ? mosi : data_register[12];
  assign _087_ = _056_ ? mosi : data_register[13];
  assign _088_ = _057_ ? mosi : data_register[14];
  assign _089_ = _058_ ? mosi : data_register[15];
  assign _090_ = _059_ ? mosi : data_register[16];
  assign _091_ = _060_ ? mosi : data_register[17];
  assign _092_ = _061_ ? mosi : data_register[18];
  assign _093_ = _062_ ? mosi : data_register[19];
  assign _094_ = _063_ ? mosi : data_register[20];
  assign _095_ = _064_ ? mosi : data_register[21];
  assign _096_ = _065_ ? mosi : data_register[22];
  assign _097_ = _066_ ? mosi : data_register[23];
  assign _098_ = _067_ ? mosi : data_register[24];
  assign _099_ = _068_ ? mosi : data_register[25];
  assign _100_ = _069_ ? mosi : data_register[26];
  assign _101_ = _070_ ? mosi : data_register[27];
  assign _102_ = _071_ ? mosi : data_register[28];
  assign _103_ = _072_ ? mosi : data_register[29];
  assign _104_ = _073_ ? mosi : data_register[30];
  assign counter = _132_;
  assign data_valid_reg = _133_;
  assign data_output_register = _134_;
  assign addr_output_register = _135_;
  assign data_register = _136_;
  assign addr_register = _137_;
  assign state = _138_;
  assign addr = addr_output_register;
  assign dataout = data_output_register;
  assign data_valid = data_valid_reg;
endmodule

module tt_cejmu_riscv(clk, ena, rst_n, ui_in, uio_in, uo_out, uio_out, uio_oe);
  wire [7:0] _00_;
  wire [31:0] _01_;
  wire [13:0] _02_;
  wire [31:0] _03_;
  wire _04_;
  wire [7:0] _05_;
  wire [13:0] _06_;
  wire [31:0] _07_;
  wire _08_;
  wire _09_;
  wire [31:0] _10_;
  wire [13:0] _11_;
  wire _12_;
  input clk;
  wire clk;
  wire [13:0] cpu_addr_out;
  wire [31:0] cpu_data_out;
  wire cpu_write_en;
  wire [31:0] dataout;
  input ena;
  wire ena;
  wire [13:0] mem_addr_in;
  wire [31:0] mem_data_in;
  wire mem_write_en;
  wire reset;
  input rst_n;
  wire rst_n;
  wire [13:0] spi_addr_out;
  wire [31:0] spi_data_out;
  wire spi_data_valid;
  input [7:0] ui_in;
  wire [7:0] ui_in;
  input [7:0] uio_in;
  wire [7:0] uio_in;
  output [7:0] uio_oe;
  wire [7:0] uio_oe;
  output [7:0] uio_out;
  wire [7:0] uio_out;
  output [7:0] uo_out;
  wire [7:0] uo_out;
  assign _05_ = _00_ & cpu_data_out[23:16];
  assign _06_ = spi_data_valid ? spi_addr_out : cpu_addr_out;
  assign _07_ = spi_data_valid ? spi_data_out : cpu_data_out;
  assign _08_ = spi_data_valid ? 1'h1 : cpu_write_en;
  assign _09_ = ~ rst_n;
  assign _00_ = cpu_data_out[15:8] & cpu_data_out[31:24];
  cpu cpu_inst (
    .addr_out(_11_),
    .clk(clk),
    .data_in(dataout),
    .data_out(_10_),
    .reset(reset),
    .write_en(_12_)
  );
  memory memory_inst (
    .addr(mem_addr_in[3:0]),
    .clk(clk),
    .datain(mem_data_in),
    .dataout(_01_),
    .reset(reset),
    .write_en(mem_write_en)
  );
  spi_slave spi_slave_inst (
    .addr(_02_),
    .cs(ui_in[1]),
    .data_valid(_04_),
    .dataout(_03_),
    .mosi(ui_in[0]),
    .sclk(clk)
  );
  assign mem_write_en = _08_;
  assign cpu_addr_out = _11_;
  assign cpu_data_out = _10_;
  assign cpu_write_en = _12_;
  assign spi_addr_out = _02_;
  assign spi_data_out = _03_;
  assign spi_data_valid = _04_;
  assign mem_addr_in = _06_;
  assign mem_data_in = _07_;
  assign dataout = _01_;
  assign reset = _09_;
  assign uo_out = cpu_data_out[7:0];
  assign uio_out = cpu_data_out[15:8];
  assign uio_oe = _05_;
endmodule
