/* Generated by Yosys 0.36+42 (git sha1 d87bd7ca3, clang 10.0.0-4ubuntu1 -fPIC -Os) */

module alu(clk, reset, a, b, instruction, rd);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire [31:0] _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  wire _13_;
  wire _14_;
  wire _15_;
  wire _16_;
  wire _17_;
  wire _18_;
  wire [31:0] _19_;
  wire _20_;
  wire _21_;
  wire _22_;
  wire _23_;
  wire _24_;
  wire _25_;
  wire _26_;
  wire _27_;
  wire _28_;
  wire [31:0] _29_;
  wire _30_;
  wire _31_;
  wire _32_;
  wire _33_;
  wire _34_;
  wire [1:0] _35_;
  wire [31:0] _36_;
  wire [31:0] _37_;
  wire [31:0] _38_;
  wire [31:0] _39_;
  wire [31:0] _40_;
  wire [31:0] _41_;
  reg [31:0] _42_;
  input [31:0] a;
  wire [31:0] a;
  input [31:0] b;
  wire [31:0] b;
  input clk;
  wire clk;
  input [16:0] instruction;
  wire [16:0] instruction;
  output [31:0] rd;
  wire [31:0] rd;
  input reset;
  wire reset;
  assign _00_ = instruction[16:10] == 7'h00;
  assign _01_ = instruction[9:7] == 3'h0;
  assign _02_ = _01_ & _00_;
  assign _03_ = instruction[6:0] == 7'h33;
  assign _04_ = _03_ & _02_;
  assign _05_ = instruction[9:7] == 3'h0;
  assign _06_ = instruction[6:0] == 7'h13;
  assign _07_ = _06_ & _05_;
  assign _08_ = _04_ | _07_;
  assign _09_ = a + b;
  assign _10_ = instruction[16:10] == 7'h00;
  assign _11_ = instruction[9:7] == 3'h7;
  assign _12_ = _11_ & _10_;
  assign _13_ = instruction[6:0] == 7'h33;
  assign _14_ = _13_ & _12_;
  assign _15_ = instruction[9:7] == 3'h7;
  assign _16_ = instruction[6:0] == 7'h13;
  assign _17_ = _16_ & _15_;
  assign _18_ = _14_ | _17_;
  assign _19_ = a & b;
  assign _20_ = instruction[16:10] == 7'h00;
  assign _21_ = instruction[9:7] == 3'h4;
  assign _22_ = _21_ & _20_;
  assign _23_ = instruction[6:0] == 7'h33;
  assign _24_ = _23_ & _22_;
  assign _25_ = instruction[9:7] == 3'h4;
  assign _26_ = instruction[6:0] == 7'h13;
  assign _27_ = _26_ & _25_;
  assign _28_ = _24_ | _27_;
  assign _29_ = a ^ b;
  assign _30_ = instruction[6:0] == 7'h6f;
  assign _31_ = instruction[6:0] == 7'h63;
  assign _32_ = instruction[9:7] == 3'h1;
  assign _33_ = _32_ & _31_;
  assign _34_ = a == b;
  assign _35_ = _34_ ? 2'h2 : 2'h0;
  assign _36_ = _33_ ? { 14'h0000, _35_, 16'h0000 } : 32'd0;
  assign _37_ = _30_ ? 32'd0 : _36_;
  assign _38_ = _28_ ? _29_ : _37_;
  assign _39_ = _18_ ? _19_ : _38_;
  assign _40_ = _08_ ? _09_ : _39_;
  assign _41_ = reset ? 32'd0 : _40_;
  always @(posedge clk)
    _42_ <= _41_;
  assign rd = _42_;
endmodule

module control(clk, reset, iword, imm, control_flags_out, wbflag, pcflag);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire [2:0] _05_;
  wire [2:0] _06_;
  wire [2:0] _07_;
  wire [2:0] _08_;
  wire [2:0] _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  wire _13_;
  wire _14_;
  wire _15_;
  wire _16_;
  wire _17_;
  wire _18_;
  wire _19_;
  wire [31:0] _20_;
  wire _21_;
  wire [31:0] _22_;
  wire _23_;
  wire [31:0] _24_;
  wire _25_;
  wire _26_;
  wire _27_;
  wire [31:0] _28_;
  wire _29_;
  wire [31:0] _30_;
  wire _31_;
  wire _32_;
  wire _33_;
  wire _34_;
  wire _35_;
  wire _36_;
  wire _37_;
  wire _38_;
  wire _39_;
  wire _40_;
  reg [2:0] _41_;
  input clk;
  wire clk;
  wire [2:0] control_flags;
  output [2:0] control_flags_out;
  wire [2:0] control_flags_out;
  wire [2:0] currstate;
  output [31:0] imm;
  wire [31:0] imm;
  input [31:0] iword;
  wire [31:0] iword;
  output pcflag;
  wire pcflag;
  input reset;
  wire reset;
  wire [20:0] w31_to_w11;
  output wbflag;
  wire wbflag;
  assign _00_ = currstate == 3'h0;
  assign _01_ = currstate == 3'h4;
  assign _02_ = currstate == 3'h1;
  assign _03_ = currstate == 3'h2;
  assign _04_ = currstate == 3'h3;
  assign _05_ = _04_ ? 3'h4 : currstate;
  assign _06_ = _03_ ? 3'h3 : _05_;
  assign _07_ = _02_ ? 3'h2 : _06_;
  assign _08_ = _01_ ? 3'h1 : _07_;
  assign _09_ = _00_ ? 3'h1 : _08_;
  assign _10_ = currstate == 3'h3;
  assign _11_ = _10_ ? 1'h1 : 1'h0;
  assign _12_ = currstate == 3'h3;
  assign _13_ = control_flags[0] & _12_;
  assign _14_ = _13_ ? 1'h1 : 1'h0;
  assign _15_ = iword[6:0] == 7'h03;
  assign _16_ = iword[6:0] == 7'h13;
  assign _17_ = _15_ | _16_;
  assign _18_ = iword[6:0] == 7'h67;
  assign _19_ = _17_ | _18_;
  assign _20_ = _19_ ? { w31_to_w11, iword[30:20] } : _22_;
  assign _21_ = iword[6:0] == 7'h23;
  assign _22_ = _21_ ? { w31_to_w11, iword[30:25], iword[11:7] } : _24_;
  assign _23_ = iword[6:0] == 7'h63;
  assign _24_ = _23_ ? { w31_to_w11[20:1], iword[7], iword[30:25], iword[11:8], 1'h0 } : _28_;
  assign _25_ = iword[6:0] == 7'h17;
  assign _26_ = iword[6:0] == 7'h37;
  assign _27_ = _25_ | _26_;
  assign _28_ = _27_ ? { iword[31:12], 12'h000 } : _30_;
  assign _29_ = iword[6:0] == 7'h6f;
  assign _30_ = _29_ ? { w31_to_w11[11:0], iword[19:12], iword[20], iword[30:21], 1'h0 } : 32'd0;
  assign _31_ = iword[6:0] == 7'h63;
  assign _32_ = _31_ ? 1'h0 : 1'h1;
  assign _33_ = iword[6:0] == 7'h13;
  assign _34_ = iword[6:0] == 7'h6f;
  assign _35_ = _33_ | _34_;
  assign _36_ = _35_ ? 1'h1 : 1'h0;
  assign _37_ = iword[6:0] == 7'h63;
  assign _38_ = iword[6:0] == 7'h6f;
  assign _39_ = _37_ | _38_;
  assign _40_ = _39_ ? 1'h1 : 1'h0;
  always @(posedge clk, posedge reset)
    if (reset) _41_ <= 3'h0;
    else _41_ <= _09_;
  assign currstate = _41_;
  assign control_flags = { _40_, _36_, _32_ };
  assign w31_to_w11 = { iword[31], iword[31], iword[31], iword[31], iword[31], iword[31], iword[31], iword[31], iword[31], iword[31], iword[31], iword[31], iword[31], iword[31], iword[31], iword[31], iword[31], iword[31], iword[31], iword[31], iword[31] };
  assign imm = _20_;
  assign control_flags_out = control_flags;
  assign wbflag = _14_;
  assign pcflag = _11_;
endmodule

module cpu(clk, reset, iword, rdtmp, addr_out);
  wire [31:0] _00_;
  wire [2:0] _01_;
  wire _02_;
  wire _03_;
  wire [31:0] _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire [31:0] _08_;
  wire [15:0] _09_;
  wire [15:0] _10_;
  wire [31:0] _11_;
  wire [31:0] _12_;
  wire [31:0] _13_;
  wire [31:0] a;
  output [13:0] addr_out;
  wire [13:0] addr_out;
  wire [31:0] b;
  input clk;
  wire clk;
  wire [2:0] control_flags_out;
  wire [31:0] imm;
  wire [16:0] instruction;
  input [31:0] iword;
  wire [31:0] iword;
  wire [15:0] pc_inc;
  wire [15:0] pc_out;
  wire pcflag;
  wire [31:0] rd;
  wire [31:0] rd_alu;
  output [31:0] rdtmp;
  wire [31:0] rdtmp;
  input reset;
  wire reset;
  wire [31:0] rs1;
  wire [31:0] rs2;
  wire s0;
  wire s1;
  wire wbflag;
  assign _04_ = control_flags_out[1] ? imm : rs2;
  assign _05_ = control_flags_out[2] ? rd[16] : 1'h0;
  assign _06_ = control_flags_out[2] ? rd[17] : 1'h1;
  assign _07_ = iword[6:0] == 7'h6f;
  assign _08_ = _07_ ? { 16'h0000, pc_inc } : rd_alu;
  alu alu_inst (
    .a(a),
    .b(b),
    .clk(clk),
    .instruction(instruction),
    .rd(_13_),
    .reset(reset)
  );
  control control_inst (
    .clk(clk),
    .control_flags_out(_01_),
    .imm(_00_),
    .iword(iword),
    .pcflag(_03_),
    .reset(reset),
    .wbflag(_02_)
  );
  instructioncounter instruction_inst (
    .clk(clk),
    .pc_inc(_09_),
    .pc_new(_10_),
    .pc_offset(imm[15:0]),
    .pcflag(pcflag),
    .reset(reset),
    .s0(s0),
    .s1(s1)
  );
  regs regs_inst (
    .clk(clk),
    .rd(rd),
    .rdadr(iword[11:7]),
    .regwrite(wbflag),
    .reset(reset),
    .rs1(_11_),
    .rs1adr(iword[19:15]),
    .rs2(_12_),
    .rs2adr(iword[24:20])
  );
  assign s0 = _05_;
  assign s1 = _06_;
  assign imm = _00_;
  assign control_flags_out = _01_;
  assign rs1 = _11_;
  assign rs2 = _12_;
  assign a = rs1;
  assign b = _04_;
  assign rd_alu = _13_;
  assign rd = _08_;
  assign wbflag = _02_;
  assign pcflag = _03_;
  assign instruction = { iword[31:25], iword[14:12], iword[6:0] };
  assign pc_inc = _09_;
  assign pc_out = _10_;
  assign rdtmp = rd_alu;
  assign addr_out = pc_out[15:2];
endmodule

module instructioncounter(clk, reset, pcflag, s0, s1, pc_offset, pc_inc, pc_new);
  wire [15:0] _00_;
  wire [15:0] _01_;
  wire _02_;
  wire [15:0] _03_;
  wire _04_;
  wire _05_;
  wire [15:0] _06_;
  wire [15:0] _07_;
  wire [15:0] _08_;
  reg [15:0] _09_ = 16'h0000;
  reg [15:0] _10_;
  input clk;
  wire clk;
  output [15:0] pc_inc;
  wire [15:0] pc_inc;
  output [15:0] pc_new;
  wire [15:0] pc_new;
  input [15:0] pc_offset;
  wire [15:0] pc_offset;
  input pcflag;
  wire pcflag;
  wire [15:0] \reg ;
  input reset;
  wire reset;
  input s0;
  wire s0;
  input s1;
  wire s1;
  wire [1:0] s1s0;
  assign _00_ = \reg  + 16'h0004;
  assign _01_ = pc_offset + \reg ;
  assign _02_ = s1s0 == 2'h0;
  assign _03_ = \reg  + 16'h0004;
  assign _04_ = s1s0 == 2'h2;
  assign _05_ = s1s0 == 2'h1;
  function [15:0] \639 ;
    input [15:0] a;
    input [47:0] b;
    input [2:0] s;
    (* parallel_case *)
    casez (s)
      3'b??1:
        \639  = b[15:0];
      3'b?1?:
        \639  = b[31:16];
      3'b1??:
        \639  = b[47:32];
      default:
        \639  = a;
    endcase
  endfunction
  assign _06_ = \639 (16'h0000, { pc_offset, _03_, _01_ }, { _05_, _04_, _02_ });
  assign _07_ = pcflag ? _06_ : \reg ;
  assign _08_ = reset ? 16'h0000 : _07_;
  always @(posedge clk)
    _09_ <= _08_;
  always @(posedge clk)
    _10_ <= _00_;
  assign s1s0 = { s1, s0 };
  assign \reg  = _09_;
  assign pc_inc = _10_;
  assign pc_new = \reg ;
endmodule

module regs(clk, reset, rs1adr, rs2adr, rdadr, rd, regwrite, rs1, rs2);
  wire _0_;
  wire _1_;
  wire _2_;
  wire _3_;
  reg [31:0] _4_;
  reg [31:0] _5_;
  wire [1023:0] _6_;
  wire [31:0] _7_;
  wire [1023:0] _8_;
  wire [31:0] _9_;
  input clk;
  wire clk;
  input [31:0] rd;
  wire [31:0] rd;
  input [4:0] rdadr;
  wire [4:0] rdadr;
  input regwrite;
  wire regwrite;
  input reset;
  wire reset;
  output [31:0] rs1;
  wire [31:0] rs1;
  input [4:0] rs1adr;
  wire [4:0] rs1adr;
  output [31:0] rs2;
  wire [31:0] rs2;
  input [4:0] rs2adr;
  wire [4:0] rs2adr;
  reg [31:0] registers [31:0];
  initial begin
    registers[0] = 32'd0;
    registers[1] = 32'd0;
    registers[2] = 32'd0;
    registers[3] = 32'd0;
    registers[4] = 32'd0;
    registers[5] = 32'd0;
    registers[6] = 32'd0;
    registers[7] = 32'd0;
    registers[8] = 32'd0;
    registers[9] = 32'd0;
    registers[10] = 32'd0;
    registers[11] = 32'd0;
    registers[12] = 32'd0;
    registers[13] = 32'd0;
    registers[14] = 32'd0;
    registers[15] = 32'd0;
    registers[16] = 32'd0;
    registers[17] = 32'd0;
    registers[18] = 32'd0;
    registers[19] = 32'd0;
    registers[20] = 32'd0;
    registers[21] = 32'd0;
    registers[22] = 32'd0;
    registers[23] = 32'd0;
    registers[24] = 32'd0;
    registers[25] = 32'd0;
    registers[26] = 32'd0;
    registers[27] = 32'd0;
    registers[28] = 32'd0;
    registers[29] = 32'd0;
    registers[30] = 32'd0;
    registers[31] = 32'd0;
  end
  always @(posedge clk) begin
    if (_3_)
      registers[rdadr] <= rd;
  end
  assign _9_ = registers[rs1adr];
  assign _7_ = registers[rs2adr];
  assign _0_ = rdadr != 5'h00;
  assign _1_ = _0_ & regwrite;
  assign _2_ = ~ reset;
  assign _3_ = _1_ & _2_;
  always @(posedge clk, posedge reset)
    if (reset) _4_ <= 32'd0;
    else _4_ <= _9_;
  always @(posedge clk, posedge reset)
    if (reset) _5_ <= 32'd0;
    else _5_ <= _7_;
  assign rs1 = _4_;
  assign rs2 = _5_;
endmodule

module spi_slave(sclk, mosi, cs, addr, dataout, data_valid);
  wire _000_;
  wire _001_;
  wire _002_;
  wire _003_;
  wire _004_;
  wire _005_;
  wire _006_;
  wire _007_;
  wire _008_;
  wire _009_;
  wire _010_;
  wire _011_;
  wire _012_;
  wire _013_;
  wire _014_;
  wire _015_;
  wire _016_;
  wire _017_;
  wire _018_;
  wire _019_;
  wire _020_;
  wire _021_;
  wire _022_;
  wire _023_;
  wire _024_;
  wire _025_;
  wire _026_;
  wire _027_;
  wire _028_;
  wire _029_;
  wire _030_;
  wire _031_;
  wire _032_;
  wire _033_;
  wire _034_;
  wire _035_;
  wire _036_;
  wire _037_;
  wire _038_;
  wire _039_;
  wire _040_;
  wire _041_;
  wire _042_;
  wire _043_;
  wire _044_;
  wire _045_;
  wire _046_;
  wire _047_;
  wire _048_;
  wire _049_;
  wire _050_;
  wire _051_;
  wire _052_;
  wire _053_;
  wire _054_;
  wire _055_;
  wire _056_;
  wire _057_;
  wire _058_;
  wire _059_;
  wire _060_;
  wire _061_;
  wire _062_;
  wire _063_;
  wire _064_;
  wire _065_;
  wire _066_;
  wire _067_;
  wire _068_;
  wire _069_;
  wire _070_;
  wire _071_;
  wire _072_;
  wire _073_;
  wire _074_;
  wire _075_;
  wire _076_;
  wire _077_;
  wire _078_;
  wire _079_;
  wire _080_;
  wire _081_;
  wire _082_;
  wire _083_;
  wire _084_;
  wire _085_;
  wire _086_;
  wire _087_;
  wire _088_;
  wire _089_;
  wire _090_;
  wire _091_;
  wire _092_;
  wire _093_;
  wire _094_;
  wire [4:0] _095_;
  wire [4:0] _096_;
  wire _097_;
  wire _098_;
  wire [4:0] _099_;
  wire [4:0] _100_;
  wire _101_;
  wire [31:0] _102_;
  wire [13:0] _103_;
  wire [30:0] _104_;
  wire _105_;
  wire [4:0] _106_;
  wire _107_;
  wire [31:0] _108_;
  wire [13:0] _109_;
  wire [30:0] _110_;
  wire [13:0] _111_;
  wire _112_;
  wire [4:0] _113_;
  wire _114_;
  wire [31:0] _115_;
  wire [13:0] _116_;
  wire [30:0] _117_;
  wire [13:0] _118_;
  wire _119_;
  reg [4:0] _120_ = 5'h00;
  reg _121_ = 1'h0;
  reg [31:0] _122_ = 32'd0;
  reg [13:0] _123_ = 14'h0000;
  reg [30:0] _124_ = 31'h00000000;
  reg [13:0] _125_ = 14'h0000;
  reg _126_ = 1'h0;
  wire _127_;
  wire _128_;
  wire _129_;
  wire _130_;
  wire _131_;
  wire _132_;
  wire _133_;
  wire _134_;
  wire _135_;
  wire _136_;
  wire _137_;
  wire _138_;
  wire _139_;
  wire _140_;
  wire _141_;
  wire _142_;
  wire _143_;
  wire _144_;
  wire _145_;
  wire _146_;
  wire _147_;
  wire _148_;
  wire _149_;
  wire _150_;
  wire _151_;
  wire _152_;
  wire _153_;
  wire _154_;
  wire _155_;
  wire _156_;
  wire _157_;
  wire _158_;
  wire _159_;
  wire _160_;
  wire _161_;
  wire _162_;
  wire _163_;
  wire _164_;
  wire _165_;
  wire _166_;
  wire _167_;
  wire _168_;
  wire _169_;
  wire _170_;
  wire _171_;
  output [13:0] addr;
  wire [13:0] addr;
  wire [13:0] addr_output_register;
  wire [13:0] addr_register;
  wire [4:0] counter;
  input cs;
  wire cs;
  wire [31:0] data_output_register;
  wire [30:0] data_register;
  output data_valid;
  wire data_valid;
  wire data_valid_reg;
  output [31:0] dataout;
  wire [31:0] dataout;
  input mosi;
  wire mosi;
  input sclk;
  wire sclk;
  wire state;
  assign _099_ = counter + 5'h01;
  assign _100_ = _098_ ? 5'h00 : _099_;
  assign _101_ = _098_ ? 1'h1 : data_valid_reg;
  assign _102_ = _098_ ? { data_register[7:0], data_register[15:8], data_register[23:16], mosi, data_register[30:24] } : data_output_register;
  assign _103_ = _098_ ? addr_register : addr_output_register;
  assign _104_ = _098_ ? data_register : { _092_, _091_, _090_, _089_, _088_, _087_, _086_, _085_, _084_, _083_, _082_, _081_, _080_, _079_, _078_, _077_, _076_, _075_, _074_, _073_, _072_, _071_, _070_, _069_, _068_, _067_, _066_, _065_, _064_, _063_, _062_ };
  assign _105_ = _098_ ? 1'h0 : state;
  assign _106_ = _093_ ? _096_ : _100_;
  assign _107_ = _093_ ? data_valid_reg : _101_;
  assign _108_ = _093_ ? data_output_register : _102_;
  assign _109_ = _093_ ? addr_output_register : _103_;
  assign _110_ = _093_ ? data_register : _104_;
  assign _111_ = _093_ ? { _169_, _168_, _167_, _166_, _165_, _164_, _163_, _162_, _161_, _160_, _159_, _158_, _157_, _156_ } : addr_register;
  assign _112_ = _093_ ? _097_ : _105_;
  assign _113_ = cs ? 5'h00 : _106_;
  assign _114_ = cs ? 1'h0 : _107_;
  assign _115_ = cs ? 32'd0 : _108_;
  assign _116_ = cs ? 14'h0000 : _109_;
  assign _117_ = cs ? 31'h00000000 : _110_;
  assign _118_ = cs ? 14'h0000 : _111_;
  assign _119_ = cs ? 1'h0 : _112_;
  always @(posedge sclk)
    _120_ <= _113_;
  always @(posedge sclk)
    _121_ <= _114_;
  always @(posedge sclk)
    _122_ <= _115_;
  always @(posedge sclk)
    _123_ <= _116_;
  always @(posedge sclk)
    _124_ <= _117_;
  always @(posedge sclk)
    _125_ <= _118_;
  always @(posedge sclk)
    _126_ <= _119_;
  assign _127_ = ~ counter[3];
  assign _128_ = ~ counter[2];
  assign _129_ = _127_ & _128_;
  assign _130_ = _127_ & counter[2];
  assign _131_ = counter[3] & _128_;
  assign _132_ = counter[3] & counter[2];
  assign _133_ = ~ counter[1];
  assign _134_ = _129_ & _133_;
  assign _135_ = _129_ & counter[1];
  assign _136_ = _130_ & _133_;
  assign _137_ = _130_ & counter[1];
  assign _138_ = _131_ & _133_;
  assign _139_ = _131_ & counter[1];
  assign _140_ = _132_ & _133_;
  assign _141_ = ~ counter[0];
  assign _142_ = _134_ & _141_;
  assign _143_ = _134_ & counter[0];
  assign _144_ = _135_ & _141_;
  assign _145_ = _135_ & counter[0];
  assign _146_ = _136_ & _141_;
  assign _147_ = _136_ & counter[0];
  assign _148_ = _137_ & _141_;
  assign _149_ = _137_ & counter[0];
  assign _150_ = _138_ & _141_;
  assign _151_ = _138_ & counter[0];
  assign _152_ = _139_ & _141_;
  assign _153_ = _139_ & counter[0];
  assign _154_ = _140_ & _141_;
  assign _155_ = _140_ & counter[0];
  assign _156_ = _142_ ? mosi : addr_register[0];
  assign _157_ = _143_ ? mosi : addr_register[1];
  assign _158_ = _144_ ? mosi : addr_register[2];
  assign _159_ = _145_ ? mosi : addr_register[3];
  assign _160_ = _146_ ? mosi : addr_register[4];
  assign _161_ = _147_ ? mosi : addr_register[5];
  assign _162_ = _148_ ? mosi : addr_register[6];
  assign _163_ = _149_ ? mosi : addr_register[7];
  assign _164_ = _150_ ? mosi : addr_register[8];
  assign _165_ = _151_ ? mosi : addr_register[9];
  assign _166_ = _152_ ? mosi : addr_register[10];
  assign _167_ = _153_ ? mosi : addr_register[11];
  assign _168_ = _154_ ? mosi : addr_register[12];
  assign _169_ = _155_ ? mosi : addr_register[13];
  assign _170_ = ~ counter[4];
  assign _171_ = ~ counter[3];
  assign _000_ = _170_ & _171_;
  assign _001_ = _170_ & counter[3];
  assign _002_ = counter[4] & _171_;
  assign _003_ = counter[4] & counter[3];
  assign _004_ = ~ counter[2];
  assign _005_ = _000_ & _004_;
  assign _006_ = _000_ & counter[2];
  assign _007_ = _001_ & _004_;
  assign _008_ = _001_ & counter[2];
  assign _009_ = _002_ & _004_;
  assign _010_ = _002_ & counter[2];
  assign _011_ = _003_ & _004_;
  assign _012_ = _003_ & counter[2];
  assign _013_ = ~ counter[1];
  assign _014_ = _005_ & _013_;
  assign _015_ = _005_ & counter[1];
  assign _016_ = _006_ & _013_;
  assign _017_ = _006_ & counter[1];
  assign _018_ = _007_ & _013_;
  assign _019_ = _007_ & counter[1];
  assign _020_ = _008_ & _013_;
  assign _021_ = _008_ & counter[1];
  assign _022_ = _009_ & _013_;
  assign _023_ = _009_ & counter[1];
  assign _024_ = _010_ & _013_;
  assign _025_ = _010_ & counter[1];
  assign _026_ = _011_ & _013_;
  assign _027_ = _011_ & counter[1];
  assign _028_ = _012_ & _013_;
  assign _029_ = _012_ & counter[1];
  assign _030_ = ~ counter[0];
  assign _031_ = _014_ & _030_;
  assign _032_ = _014_ & counter[0];
  assign _033_ = _015_ & _030_;
  assign _034_ = _015_ & counter[0];
  assign _035_ = _016_ & _030_;
  assign _036_ = _016_ & counter[0];
  assign _037_ = _017_ & _030_;
  assign _038_ = _017_ & counter[0];
  assign _039_ = _018_ & _030_;
  assign _040_ = _018_ & counter[0];
  assign _041_ = _019_ & _030_;
  assign _042_ = _019_ & counter[0];
  assign _043_ = _020_ & _030_;
  assign _044_ = _020_ & counter[0];
  assign _045_ = _021_ & _030_;
  assign _046_ = _021_ & counter[0];
  assign _047_ = _022_ & _030_;
  assign _048_ = _022_ & counter[0];
  assign _049_ = _023_ & _030_;
  assign _050_ = _023_ & counter[0];
  assign _051_ = _024_ & _030_;
  assign _052_ = _024_ & counter[0];
  assign _053_ = _025_ & _030_;
  assign _054_ = _025_ & counter[0];
  assign _055_ = _026_ & _030_;
  assign _056_ = _026_ & counter[0];
  assign _057_ = _027_ & _030_;
  assign _058_ = _027_ & counter[0];
  assign _059_ = _028_ & _030_;
  assign _060_ = _028_ & counter[0];
  assign _061_ = _029_ & _030_;
  assign _062_ = _031_ ? mosi : data_register[0];
  assign _063_ = _032_ ? mosi : data_register[1];
  assign _064_ = _033_ ? mosi : data_register[2];
  assign _065_ = _034_ ? mosi : data_register[3];
  assign _066_ = _035_ ? mosi : data_register[4];
  assign _067_ = _036_ ? mosi : data_register[5];
  assign _068_ = _037_ ? mosi : data_register[6];
  assign _069_ = _038_ ? mosi : data_register[7];
  assign _070_ = _039_ ? mosi : data_register[8];
  assign _071_ = _040_ ? mosi : data_register[9];
  assign _072_ = _041_ ? mosi : data_register[10];
  assign _073_ = _042_ ? mosi : data_register[11];
  assign _074_ = _043_ ? mosi : data_register[12];
  assign _075_ = _044_ ? mosi : data_register[13];
  assign _076_ = _045_ ? mosi : data_register[14];
  assign _077_ = _046_ ? mosi : data_register[15];
  assign _078_ = _047_ ? mosi : data_register[16];
  assign _079_ = _048_ ? mosi : data_register[17];
  assign _080_ = _049_ ? mosi : data_register[18];
  assign _081_ = _050_ ? mosi : data_register[19];
  assign _082_ = _051_ ? mosi : data_register[20];
  assign _083_ = _052_ ? mosi : data_register[21];
  assign _084_ = _053_ ? mosi : data_register[22];
  assign _085_ = _054_ ? mosi : data_register[23];
  assign _086_ = _055_ ? mosi : data_register[24];
  assign _087_ = _056_ ? mosi : data_register[25];
  assign _088_ = _057_ ? mosi : data_register[26];
  assign _089_ = _058_ ? mosi : data_register[27];
  assign _090_ = _059_ ? mosi : data_register[28];
  assign _091_ = _060_ ? mosi : data_register[29];
  assign _092_ = _061_ ? mosi : data_register[30];
  assign _093_ = state == 1'h0;
  assign _094_ = counter >= 5'h0d;
  assign _095_ = counter + 5'h01;
  assign _096_ = _094_ ? 5'h00 : _095_;
  assign _097_ = _094_ ? 1'h1 : state;
  assign _098_ = counter == 5'h1f;
  assign counter = _120_;
  assign data_valid_reg = _121_;
  assign data_output_register = _122_;
  assign addr_output_register = _123_;
  assign data_register = _124_;
  assign addr_register = _125_;
  assign state = _126_;
  assign addr = addr_output_register;
  assign dataout = data_output_register;
  assign data_valid = data_valid_reg;
endmodule

module tt_um_cejmu(clk, rst_n, ena, ui_in, uio_in, uo_out, uio_out, uio_oe);
  wire [7:0] _0_;
  wire [31:0] _1_;
  wire [13:0] _2_;
  wire [13:0] _3_;
  wire [31:0] _4_;
  wire _5_;
  input clk;
  wire clk;
  input ena;
  wire ena;
  wire [31:0] iword;
  wire [31:0] rdtmp;
  input rst_n;
  wire rst_n;
  wire [31:0] spi_data_out;
  input [7:0] ui_in;
  wire [7:0] ui_in;
  input [7:0] uio_in;
  wire [7:0] uio_in;
  output [7:0] uio_oe;
  wire [7:0] uio_oe;
  output [7:0] uio_out;
  wire [7:0] uio_out;
  output [7:0] uo_out;
  wire [7:0] uo_out;
  assign _0_ = rdtmp[31:24] | rdtmp[23:16];
  cpu cpu_inst (
    .addr_out(_2_),
    .clk(clk),
    .iword(iword),
    .rdtmp(_1_),
    .reset(rst_n)
  );
  spi_slave spi_slave_inst (
    .addr(_3_),
    .cs(ui_in[1]),
    .data_valid(_5_),
    .dataout(_4_),
    .mosi(ui_in[0]),
    .sclk(clk)
  );
  assign spi_data_out = _4_;
  assign iword = spi_data_out;
  assign rdtmp = _1_;
  assign uo_out = rdtmp[7:0];
  assign uio_out = rdtmp[15:8];
  assign uio_oe = _0_;
endmodule
