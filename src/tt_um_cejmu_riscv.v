/* Generated by Yosys 0.34+43 (git sha1 d21c464ae, clang 10.0.0-4ubuntu1 -fPIC -Os) */

module alu(clk, reset, a, b, instruction, rd);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  wire _13_;
  wire _14_;
  wire [31:0] _15_;
  wire _16_;
  wire _17_;
  wire _18_;
  wire _19_;
  wire _20_;
  wire [31:0] _21_;
  wire _22_;
  wire _23_;
  wire _24_;
  wire _25_;
  wire _26_;
  wire [31:0] _27_;
  wire _28_;
  wire _29_;
  wire _30_;
  wire _31_;
  wire _32_;
  wire [1:0] _33_;
  wire [31:0] _34_;
  wire [31:0] _35_;
  wire [31:0] _36_;
  wire [31:0] _37_;
  wire [31:0] _38_;
  wire [31:0] _39_;
  reg [31:0] _40_;
  input [31:0] a;
  wire [31:0] a;
  input [31:0] b;
  wire [31:0] b;
  input clk;
  wire clk;
  input [16:0] instruction;
  wire [16:0] instruction;
  output [31:0] rd;
  wire [31:0] rd;
  input reset;
  wire reset;
  assign _00_ = instruction[16:10] == 7'h00;
  assign _01_ = instruction[9:7] == 3'h0;
  assign _02_ = _01_ & _00_;
  assign _03_ = instruction[6:0] == 7'h33;
  assign _04_ = _03_ & _02_;
  assign _05_ = instruction[9:7] == 3'h0;
  assign _06_ = instruction[6:0] == 7'h13;
  assign _07_ = _06_ & _05_;
  assign _08_ = _04_ | _07_;
  assign _09_ = instruction[6:0] == 7'h23;
  assign _10_ = instruction[6:0] == 7'h03;
  assign _11_ = _09_ | _10_;
  assign _12_ = instruction[9:7] == 3'h2;
  assign _13_ = _12_ & _11_;
  assign _14_ = _08_ | _13_;
  assign _15_ = a + b;
  assign _16_ = instruction[16:10] == 7'h00;
  assign _17_ = instruction[9:7] == 3'h7;
  assign _18_ = _17_ & _16_;
  assign _19_ = instruction[6:0] == 7'h33;
  assign _20_ = _19_ & _18_;
  assign _21_ = a & b;
  assign _22_ = instruction[16:10] == 7'h00;
  assign _23_ = instruction[9:7] == 3'h4;
  assign _24_ = _23_ & _22_;
  assign _25_ = instruction[6:0] == 7'h33;
  assign _26_ = _25_ & _24_;
  assign _27_ = a ^ b;
  assign _28_ = instruction[6:0] == 7'h6f;
  assign _29_ = instruction[6:0] == 7'h63;
  assign _30_ = instruction[9:7] == 3'h1;
  assign _31_ = _30_ & _29_;
  assign _32_ = a == b;
  assign _33_ = _32_ ? 2'h2 : 2'h0;
  assign _34_ = _31_ ? { 14'h0000, _33_, 16'h0000 } : 32'd0;
  assign _35_ = _28_ ? 32'd0 : _34_;
  assign _36_ = _26_ ? _27_ : _35_;
  assign _37_ = _20_ ? _21_ : _36_;
  assign _38_ = _14_ ? _15_ : _37_;
  assign _39_ = reset ? 32'd0 : _38_;
  always @(posedge clk)
    _40_ <= _39_;
  assign rd = _40_;
endmodule

module control(clk, reset, iword, imm, control_flags_out, wbflag, memflag, pcflag, fetchflag);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire [2:0] _12_;
  wire [2:0] _13_;
  wire [2:0] _14_;
  wire [1:0] _15_;
  wire [2:0] _16_;
  wire [1:0] _17_;
  wire [2:0] _18_;
  wire [1:0] _19_;
  wire [2:0] _20_;
  wire [1:0] _21_;
  wire [2:0] _22_;
  wire [1:0] _23_;
  wire _24_;
  wire _25_;
  wire _26_;
  wire _27_;
  wire _28_;
  wire _29_;
  wire _30_;
  wire _31_;
  wire _32_;
  wire _33_;
  wire _34_;
  wire _35_;
  wire _36_;
  wire _37_;
  wire _38_;
  wire _39_;
  wire _40_;
  wire _41_;
  wire _42_;
  wire _43_;
  wire _44_;
  wire _45_;
  wire _46_;
  wire _47_;
  wire _48_;
  wire _49_;
  wire _50_;
  wire [31:0] _51_;
  wire _52_;
  wire [31:0] _53_;
  wire _54_;
  wire [31:0] _55_;
  wire _56_;
  wire [31:0] _57_;
  wire _58_;
  wire _59_;
  wire _60_;
  wire _61_;
  wire _62_;
  wire _63_;
  wire _64_;
  wire _65_;
  wire _66_;
  wire _67_;
  wire _68_;
  wire _69_;
  wire _70_;
  wire _71_;
  wire _72_;
  wire _73_;
  wire _74_;
  wire _75_;
  wire _76_;
  wire _77_;
  wire _78_;
  wire _79_;
  wire _80_;
  wire _81_;
  wire _82_;
  wire _83_;
  wire _84_;
  wire _85_;
  wire _86_;
  wire _87_;
  wire _88_;
  wire _89_;
  wire _90_;
  wire _91_;
  reg [2:0] _92_;
  wire _93_;
  wire [1:0] _94_;
  reg [1:0] _95_;
  input clk;
  wire clk;
  wire [6:0] control_flags;
  output [6:0] control_flags_out;
  wire [6:0] control_flags_out;
  wire [2:0] currstate;
  output fetchflag;
  wire fetchflag;
  output [31:0] imm;
  wire [31:0] imm;
  input [31:0] iword;
  wire [31:0] iword;
  output memflag;
  wire memflag;
  output pcflag;
  wire pcflag;
  input reset;
  wire reset;
  wire [20:0] w31_to_w11;
  output wbflag;
  wire wbflag;
  assign _00_ = currstate == 3'h0;
  assign _01_ = currstate == 3'h6;
  assign _02_ = currstate == 3'h1;
  assign _03_ = currstate == 3'h2;
  assign _04_ = currstate == 3'h3;
  assign _05_ = currstate == 3'h4;
  assign _06_ = control_flags[0] & _05_;
  assign _07_ = currstate == 3'h5;
  assign _08_ = currstate == 3'h4;
  assign _09_ = ~ control_flags[0];
  assign _10_ = _09_ & _08_;
  assign _11_ = _07_ | _10_;
  assign _12_ = _11_ ? 3'h6 : currstate;
  assign _13_ = _06_ ? 3'h5 : _12_;
  assign _14_ = _04_ ? 3'h4 : _13_;
  assign _15_ = _04_ ? 2'h3 : control_flags[6:5];
  assign _16_ = _03_ ? 3'h3 : _14_;
  assign _17_ = _03_ ? 2'h2 : _15_;
  assign _18_ = _02_ ? 3'h2 : _16_;
  assign _19_ = _02_ ? 2'h1 : _17_;
  assign _20_ = _01_ ? 3'h1 : _18_;
  assign _21_ = _01_ ? 2'h0 : _19_;
  assign _22_ = _00_ ? 3'h1 : _20_;
  assign _23_ = _00_ ? 2'h0 : _21_;
  assign _24_ = currstate == 3'h4;
  assign _25_ = ~ control_flags[0];
  assign _26_ = _25_ & _24_;
  assign _27_ = currstate == 3'h5;
  assign _28_ = _26_ | _27_;
  assign _29_ = _28_ ? 1'h1 : 1'h0;
  assign _30_ = currstate == 3'h4;
  assign _31_ = control_flags[0] & _30_;
  assign _32_ = control_flags[1] & _31_;
  assign _33_ = _32_ ? 1'h1 : 1'h0;
  assign _34_ = currstate == 3'h5;
  assign _35_ = control_flags[2] & _34_;
  assign _36_ = currstate == 3'h4;
  assign _37_ = control_flags[2] & _36_;
  assign _38_ = ~ control_flags[0];
  assign _39_ = _38_ & _37_;
  assign _40_ = _35_ | _39_;
  assign _41_ = _40_ ? 1'h1 : 1'h0;
  assign _42_ = currstate == 3'h0;
  assign _43_ = currstate == 3'h6;
  assign _44_ = _42_ | _43_;
  assign _45_ = _44_ ? 1'h1 : 1'h0;
  assign _46_ = iword[6:0] == 7'h03;
  assign _47_ = iword[6:0] == 7'h13;
  assign _48_ = _46_ | _47_;
  assign _49_ = iword[6:0] == 7'h67;
  assign _50_ = _48_ | _49_;
  assign _51_ = _50_ ? { w31_to_w11, iword[30:20] } : _53_;
  assign _52_ = iword[6:0] == 7'h23;
  assign _53_ = _52_ ? { w31_to_w11, iword[30:25], iword[11:7] } : _55_;
  assign _54_ = iword[6:0] == 7'h63;
  assign _55_ = _54_ ? { w31_to_w11[20:1], iword[7], iword[30:25], iword[11:8], 1'h0 } : _57_;
  assign _56_ = iword[6:0] == 7'h6f;
  assign _57_ = _56_ ? { w31_to_w11[11:0], iword[19:12], iword[20], iword[30:21], 1'h0 } : 32'd0;
  assign _58_ = iword[6:0] == 7'h03;
  assign _59_ = iword[6:0] == 7'h23;
  assign _60_ = _58_ | _59_;
  assign _61_ = iword[14:12] == 3'h2;
  assign _62_ = _61_ & _60_;
  assign _63_ = _62_ ? 1'h1 : 1'h0;
  assign _64_ = iword[6:0] == 7'h23;
  assign _65_ = iword[14:12] == 3'h2;
  assign _66_ = _65_ & _64_;
  assign _67_ = _66_ ? 1'h1 : 1'h0;
  assign _68_ = iword[6:0] == 7'h63;
  assign _69_ = _68_ ? 1'h0 : 1'h1;
  assign _70_ = iword[6:0] == 7'h13;
  assign _71_ = iword[6:0] == 7'h37;
  assign _72_ = _70_ | _71_;
  assign _73_ = iword[6:0] == 7'h17;
  assign _74_ = _72_ | _73_;
  assign _75_ = iword[6:0] == 7'h03;
  assign _76_ = iword[6:0] == 7'h23;
  assign _77_ = _75_ | _76_;
  assign _78_ = iword[14:12] == 3'h2;
  assign _79_ = _78_ & _77_;
  assign _80_ = _74_ | _79_;
  assign _81_ = iword[6:0] == 7'h6f;
  assign _82_ = _80_ | _81_;
  assign _83_ = iword[6:0] == 7'h67;
  assign _84_ = _82_ | _83_;
  assign _85_ = _84_ ? 1'h1 : 1'h0;
  assign _86_ = iword[6:0] == 7'h63;
  assign _87_ = iword[6:0] == 7'h6f;
  assign _88_ = _86_ | _87_;
  assign _89_ = iword[6:0] == 7'h67;
  assign _90_ = _88_ | _89_;
  assign _91_ = _90_ ? 1'h1 : 1'h0;
  always @(posedge clk, posedge reset)
    if (reset) _92_ <= 3'h0;
    else _92_ <= _22_;
  assign _93_ = ~ reset;
  assign _94_ = _93_ ? _23_ : control_flags[6:5];
  always @(posedge clk)
    _95_ <= _94_;
  assign currstate = _92_;
  assign control_flags = { _95_, _91_, _85_, _69_, _67_, _63_ };
  assign w31_to_w11 = { iword[31], iword[31], iword[31], iword[31], iword[31], iword[31], iword[31], iword[31], iword[31], iword[31], iword[31], iword[31], iword[31], iword[31], iword[31], iword[31], iword[31], iword[31], iword[31], iword[31], iword[31] };
  assign imm = _51_;
  assign control_flags_out = control_flags;
  assign wbflag = _41_;
  assign memflag = _33_;
  assign pcflag = _29_;
  assign fetchflag = _45_;
endmodule

module cpu(clk, reset, data_in, data_out, addr_out, write_en);
  wire _00_;
  wire [4:0] _01_;
  wire _02_;
  wire [4:0] _03_;
  wire _04_;
  wire _05_;
  wire [31:0] _06_;
  wire [31:0] _07_;
  wire [31:0] _08_;
  wire [6:0] _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  wire _13_;
  wire [31:0] _14_;
  wire [31:0] _15_;
  wire [31:0] _16_;
  wire _17_;
  wire _18_;
  wire [15:0] _19_;
  wire [15:0] _20_;
  wire [13:0] _21_;
  wire [31:0] _22_;
  reg [31:0] _23_;
  wire [31:0] _24_;
  reg [31:0] _25_;
  wire [31:0] _26_;
  reg [31:0] _27_;
  output [13:0] addr_out;
  wire [13:0] addr_out;
  wire [31:0] b;
  input clk;
  wire clk;
  wire [6:0] control_flags_out;
  input [31:0] data_in;
  wire [31:0] data_in;
  output [31:0] data_out;
  wire [31:0] data_out;
  wire fetchflag;
  wire [31:0] imm;
  wire [16:0] instruction;
  wire [31:0] iword_reg;
  wire memflag;
  wire [15:0] pc_inc;
  wire [15:0] pc_out;
  wire pcflag;
  wire [31:0] rd;
  wire [31:0] rdalu;
  wire [4:0] reg_addr;
  wire [31:0] reg_dataout;
  input reset;
  wire reset;
  wire [31:0] rs1;
  wire [31:0] rs2;
  wire s0;
  wire s1;
  wire wbflag;
  output write_en;
  wire write_en;
  assign _00_ = control_flags_out[6:5] == 2'h0;
  assign _01_ = _00_ ? iword_reg[19:15] : _03_;
  assign _02_ = control_flags_out[6:5] == 2'h1;
  assign _03_ = _02_ ? iword_reg[24:20] : iword_reg[11:7];
  assign _04_ = control_flags_out[6:5] == 2'h1;
  assign _05_ = control_flags_out[6:5] == 2'h2;
  assign _14_ = control_flags_out[3] ? imm : rs2;
  assign _15_ = control_flags_out[4] ? { 16'h0000, pc_inc } : _16_;
  assign _16_ = control_flags_out[0] ? data_in : rdalu;
  assign _17_ = control_flags_out[4] ? rdalu[16] : 1'h0;
  assign _18_ = control_flags_out[4] ? rdalu[17] : 1'h1;
  assign _21_ = fetchflag ? pc_out[15:2] : rdalu[13:0];
  assign _22_ = _04_ ? reg_dataout : rs1;
  always @(posedge clk)
    _23_ <= _22_;
  assign _24_ = _05_ ? reg_dataout : rs2;
  always @(posedge clk)
    _25_ <= _24_;
  assign _26_ = fetchflag ? data_in : iword_reg;
  always @(posedge clk)
    _27_ <= _26_;
  alu alu_inst (
    .a(rs1),
    .b(b),
    .clk(clk),
    .instruction(instruction),
    .rd(_07_),
    .reset(reset)
  );
  control control_inst (
    .clk(clk),
    .control_flags_out(_09_),
    .fetchflag(_13_),
    .imm(_08_),
    .iword(iword_reg),
    .memflag(_11_),
    .pcflag(_12_),
    .reset(reset),
    .wbflag(_10_)
  );
  instructioncounter instruction_inst (
    .clk(clk),
    .pc_inc(_19_),
    .pc_new(_20_),
    .pc_offset(imm[15:0]),
    .pcflag(pcflag),
    .reset(reset),
    .s0(s0),
    .s1(s1)
  );
  regs regs_inst (
    .addr(reg_addr),
    .clk(clk),
    .datain(rd),
    .dataout(_06_),
    .regwrite(wbflag),
    .reset(reset)
  );
  assign s0 = _17_;
  assign s1 = _18_;
  assign imm = _08_;
  assign control_flags_out = _09_;
  assign rs1 = _23_;
  assign rs2 = _25_;
  assign reg_dataout = _06_;
  assign reg_addr = _01_;
  assign b = _14_;
  assign rdalu = _07_;
  assign rd = _15_;
  assign wbflag = _10_;
  assign memflag = _11_;
  assign pcflag = _12_;
  assign fetchflag = _13_;
  assign iword_reg = _27_;
  assign instruction = { iword_reg[31:25], iword_reg[14:12], iword_reg[6:0] };
  assign pc_inc = _19_;
  assign pc_out = _20_;
  assign data_out = rs2;
  assign addr_out = _21_;
  assign write_en = memflag;
endmodule

module instructioncounter(clk, reset, pcflag, s0, s1, pc_offset, pc_inc, pc_new);
  wire [15:0] _00_;
  wire [15:0] _01_;
  wire _02_;
  wire [15:0] _03_;
  wire _04_;
  wire _05_;
  wire [15:0] _06_;
  wire [15:0] _07_;
  wire [15:0] _08_;
  reg [15:0] _09_ = 16'h0000;
  reg [15:0] _10_;
  input clk;
  wire clk;
  output [15:0] pc_inc;
  wire [15:0] pc_inc;
  output [15:0] pc_new;
  wire [15:0] pc_new;
  input [15:0] pc_offset;
  wire [15:0] pc_offset;
  input pcflag;
  wire pcflag;
  wire [15:0] \reg ;
  input reset;
  wire reset;
  input s0;
  wire s0;
  input s1;
  wire s1;
  wire [1:0] s1s0;
  assign _00_ = \reg  + 16'h0004;
  assign _01_ = pc_offset + \reg ;
  assign _02_ = s1s0 == 2'h0;
  assign _03_ = \reg  + 16'h0004;
  assign _04_ = s1s0 == 2'h2;
  assign _05_ = s1s0 == 2'h1;
  function [15:0] \764 ;
    input [15:0] a;
    input [47:0] b;
    input [2:0] s;
    (* parallel_case *)
    casez (s)
      3'b??1:
        \764  = b[15:0];
      3'b?1?:
        \764  = b[31:16];
      3'b1??:
        \764  = b[47:32];
      default:
        \764  = a;
    endcase
  endfunction
  assign _06_ = \764 (16'h0000, { pc_offset, _03_, _01_ }, { _05_, _04_, _02_ });
  assign _07_ = pcflag ? _06_ : \reg ;
  assign _08_ = reset ? 16'h0000 : _07_;
  always @(posedge clk)
    _09_ <= _08_;
  always @(posedge clk)
    _10_ <= _00_;
  assign s1s0 = { s1, s0 };
  assign \reg  = _09_;
  assign pc_inc = _10_;
  assign pc_new = \reg ;
endmodule

module regs(clk, reset, addr, datain, regwrite, dataout);
  wire _0_;
  wire [31:0] _1_;
  wire _2_;
  wire _3_;
  wire _4_;
  reg [31:0] _5_;
  wire [1023:0] _6_;
  wire [31:0] _7_;
  input [4:0] addr;
  wire [4:0] addr;
  input clk;
  wire clk;
  input [31:0] datain;
  wire [31:0] datain;
  output [31:0] dataout;
  wire [31:0] dataout;
  input regwrite;
  wire regwrite;
  input reset;
  wire reset;
  reg [31:0] registers [31:0];
  initial begin
    registers[0] = 32'd0;
    registers[1] = 32'd0;
    registers[2] = 32'd0;
    registers[3] = 32'd0;
    registers[4] = 32'd0;
    registers[5] = 32'd0;
    registers[6] = 32'd0;
    registers[7] = 32'd0;
    registers[8] = 32'd0;
    registers[9] = 32'd0;
    registers[10] = 32'd0;
    registers[11] = 32'd0;
    registers[12] = 32'd0;
    registers[13] = 32'd0;
    registers[14] = 32'd0;
    registers[15] = 32'd0;
    registers[16] = 32'd0;
    registers[17] = 32'd0;
    registers[18] = 32'd0;
    registers[19] = 32'd0;
    registers[20] = 32'd0;
    registers[21] = 32'd0;
    registers[22] = 32'd0;
    registers[23] = 32'd0;
    registers[24] = 32'd0;
    registers[25] = 32'd0;
    registers[26] = 32'd0;
    registers[27] = 32'd0;
    registers[28] = 32'd0;
    registers[29] = 32'd0;
    registers[30] = 32'd0;
    registers[31] = 32'd0;
  end
  always @(posedge clk) begin
    if (_4_)
      registers[addr] <= datain;
  end
  assign _7_ = registers[addr];
  assign _0_ = addr != 5'h00;
  assign _1_ = regwrite ? _5_ : _7_;
  assign _2_ = regwrite & _0_;
  assign _3_ = ~ reset;
  assign _4_ = _2_ & _3_;
  always @(posedge clk, posedge reset)
    if (reset) _5_ <= 32'd0;
    else _5_ <= _1_;
  assign dataout = _5_;
endmodule

module spi_slave(sclk, mosi, cs, addr, dataout, data_valid);
  wire _000_;
  wire _001_;
  wire _002_;
  wire _003_;
  wire _004_;
  wire _005_;
  wire _006_;
  wire _007_;
  wire _008_;
  wire _009_;
  wire _010_;
  wire _011_;
  wire _012_;
  wire _013_;
  wire _014_;
  wire _015_;
  wire _016_;
  wire _017_;
  wire _018_;
  wire _019_;
  wire _020_;
  wire _021_;
  wire _022_;
  wire _023_;
  wire _024_;
  wire _025_;
  wire _026_;
  wire _027_;
  wire _028_;
  wire _029_;
  wire _030_;
  wire _031_;
  wire _032_;
  wire _033_;
  wire _034_;
  wire _035_;
  wire _036_;
  wire _037_;
  wire _038_;
  wire _039_;
  wire _040_;
  wire _041_;
  wire _042_;
  wire _043_;
  wire _044_;
  wire _045_;
  wire _046_;
  wire _047_;
  wire _048_;
  wire _049_;
  wire _050_;
  wire _051_;
  wire _052_;
  wire _053_;
  wire _054_;
  wire _055_;
  wire _056_;
  wire _057_;
  wire _058_;
  wire _059_;
  wire _060_;
  wire _061_;
  wire _062_;
  wire _063_;
  wire _064_;
  wire _065_;
  wire _066_;
  wire _067_;
  wire _068_;
  wire _069_;
  wire _070_;
  wire _071_;
  wire _072_;
  wire _073_;
  wire _074_;
  wire _075_;
  wire _076_;
  wire _077_;
  wire _078_;
  wire _079_;
  wire _080_;
  wire _081_;
  wire _082_;
  wire _083_;
  wire _084_;
  wire _085_;
  wire _086_;
  wire _087_;
  wire _088_;
  wire _089_;
  wire _090_;
  wire _091_;
  wire _092_;
  wire _093_;
  wire _094_;
  wire _095_;
  wire _096_;
  wire _097_;
  wire _098_;
  wire _099_;
  wire _100_;
  wire _101_;
  wire _102_;
  wire _103_;
  wire _104_;
  wire _105_;
  wire _106_;
  wire _107_;
  wire _108_;
  wire _109_;
  wire _110_;
  wire _111_;
  wire [4:0] _112_;
  wire [4:0] _113_;
  wire _114_;
  wire _115_;
  wire [4:0] _116_;
  wire [4:0] _117_;
  wire _118_;
  wire [31:0] _119_;
  wire [13:0] _120_;
  wire [30:0] _121_;
  wire _122_;
  wire [4:0] _123_;
  wire _124_;
  wire [31:0] _125_;
  wire [13:0] _126_;
  wire [30:0] _127_;
  wire [13:0] _128_;
  wire _129_;
  wire [4:0] _130_;
  wire _131_;
  wire [31:0] _132_;
  wire [13:0] _133_;
  wire [30:0] _134_;
  wire [13:0] _135_;
  wire _136_;
  reg [4:0] _137_ = 5'h00;
  reg _138_ = 1'h0;
  reg [31:0] _139_ = 32'd0;
  reg [13:0] _140_ = 14'h0000;
  reg [30:0] _141_ = 31'h00000000;
  reg [13:0] _142_ = 14'h0000;
  reg _143_ = 1'h0;
  wire _144_;
  wire _145_;
  wire _146_;
  wire _147_;
  wire _148_;
  wire _149_;
  wire _150_;
  wire _151_;
  wire _152_;
  wire _153_;
  wire _154_;
  wire _155_;
  wire _156_;
  wire _157_;
  wire _158_;
  wire _159_;
  wire _160_;
  wire _161_;
  wire _162_;
  wire _163_;
  wire _164_;
  wire _165_;
  wire _166_;
  wire _167_;
  wire _168_;
  wire _169_;
  wire _170_;
  wire _171_;
  output [13:0] addr;
  wire [13:0] addr;
  wire [13:0] addr_output_register;
  wire [13:0] addr_register;
  wire [4:0] counter;
  input cs;
  wire cs;
  wire [31:0] data_output_register;
  wire [30:0] data_register;
  output data_valid;
  wire data_valid;
  wire data_valid_reg;
  output [31:0] dataout;
  wire [31:0] dataout;
  input mosi;
  wire mosi;
  input sclk;
  wire sclk;
  wire state;
  assign _110_ = state == 1'h0;
  assign _111_ = counter >= 5'h0d;
  assign _112_ = counter + 5'h01;
  assign _113_ = _111_ ? 5'h00 : _112_;
  assign _114_ = _111_ ? 1'h1 : state;
  assign _115_ = counter == 5'h1f;
  assign _116_ = counter + 5'h01;
  assign _117_ = _115_ ? 5'h00 : _116_;
  assign _118_ = _115_ ? 1'h1 : data_valid_reg;
  assign _119_ = _115_ ? { data_register[7:0], data_register[15:8], data_register[23:16], mosi, data_register[30:24] } : data_output_register;
  assign _120_ = _115_ ? addr_register : addr_output_register;
  assign _121_ = _115_ ? data_register : { _109_, _108_, _107_, _106_, _105_, _104_, _103_, _102_, _101_, _100_, _099_, _098_, _097_, _096_, _095_, _094_, _093_, _092_, _091_, _090_, _089_, _088_, _087_, _086_, _085_, _084_, _083_, _082_, _081_, _080_, _079_ };
  assign _122_ = _115_ ? 1'h0 : state;
  assign _123_ = _110_ ? _113_ : _117_;
  assign _124_ = _110_ ? data_valid_reg : _118_;
  assign _125_ = _110_ ? data_output_register : _119_;
  assign _126_ = _110_ ? addr_output_register : _120_;
  assign _127_ = _110_ ? data_register : _121_;
  assign _128_ = _110_ ? { _014_, _013_, _012_, _011_, _010_, _009_, _008_, _007_, _006_, _005_, _004_, _003_, _002_, _001_ } : addr_register;
  assign _129_ = _110_ ? _114_ : _122_;
  assign _130_ = cs ? 5'h00 : _123_;
  assign _131_ = cs ? 1'h0 : _124_;
  assign _132_ = cs ? 32'd0 : _125_;
  assign _133_ = cs ? 14'h0000 : _126_;
  assign _134_ = cs ? 31'h00000000 : _127_;
  assign _135_ = cs ? 14'h0000 : _128_;
  assign _136_ = cs ? 1'h0 : _129_;
  always @(posedge sclk)
    _137_ <= _130_;
  always @(posedge sclk)
    _138_ <= _131_;
  always @(posedge sclk)
    _139_ <= _132_;
  always @(posedge sclk)
    _140_ <= _133_;
  always @(posedge sclk)
    _141_ <= _134_;
  always @(posedge sclk)
    _142_ <= _135_;
  always @(posedge sclk)
    _143_ <= _136_;
  assign _144_ = ~ counter[3];
  assign _145_ = ~ counter[2];
  assign _146_ = _144_ & _145_;
  assign _147_ = _144_ & counter[2];
  assign _148_ = counter[3] & _145_;
  assign _149_ = counter[3] & counter[2];
  assign _150_ = ~ counter[1];
  assign _151_ = _146_ & _150_;
  assign _152_ = _146_ & counter[1];
  assign _153_ = _147_ & _150_;
  assign _154_ = _147_ & counter[1];
  assign _155_ = _148_ & _150_;
  assign _156_ = _148_ & counter[1];
  assign _157_ = _149_ & _150_;
  assign _158_ = ~ counter[0];
  assign _159_ = _151_ & _158_;
  assign _160_ = _151_ & counter[0];
  assign _161_ = _152_ & _158_;
  assign _162_ = _152_ & counter[0];
  assign _163_ = _153_ & _158_;
  assign _164_ = _153_ & counter[0];
  assign _165_ = _154_ & _158_;
  assign _166_ = _154_ & counter[0];
  assign _167_ = _155_ & _158_;
  assign _168_ = _155_ & counter[0];
  assign _169_ = _156_ & _158_;
  assign _170_ = _156_ & counter[0];
  assign _171_ = _157_ & _158_;
  assign _000_ = _157_ & counter[0];
  assign _001_ = _159_ ? mosi : addr_register[0];
  assign _002_ = _160_ ? mosi : addr_register[1];
  assign _003_ = _161_ ? mosi : addr_register[2];
  assign _004_ = _162_ ? mosi : addr_register[3];
  assign _005_ = _163_ ? mosi : addr_register[4];
  assign _006_ = _164_ ? mosi : addr_register[5];
  assign _007_ = _165_ ? mosi : addr_register[6];
  assign _008_ = _166_ ? mosi : addr_register[7];
  assign _009_ = _167_ ? mosi : addr_register[8];
  assign _010_ = _168_ ? mosi : addr_register[9];
  assign _011_ = _169_ ? mosi : addr_register[10];
  assign _012_ = _170_ ? mosi : addr_register[11];
  assign _013_ = _171_ ? mosi : addr_register[12];
  assign _014_ = _000_ ? mosi : addr_register[13];
  assign _015_ = ~ counter[4];
  assign _016_ = ~ counter[3];
  assign _017_ = _015_ & _016_;
  assign _018_ = _015_ & counter[3];
  assign _019_ = counter[4] & _016_;
  assign _020_ = counter[4] & counter[3];
  assign _021_ = ~ counter[2];
  assign _022_ = _017_ & _021_;
  assign _023_ = _017_ & counter[2];
  assign _024_ = _018_ & _021_;
  assign _025_ = _018_ & counter[2];
  assign _026_ = _019_ & _021_;
  assign _027_ = _019_ & counter[2];
  assign _028_ = _020_ & _021_;
  assign _029_ = _020_ & counter[2];
  assign _030_ = ~ counter[1];
  assign _031_ = _022_ & _030_;
  assign _032_ = _022_ & counter[1];
  assign _033_ = _023_ & _030_;
  assign _034_ = _023_ & counter[1];
  assign _035_ = _024_ & _030_;
  assign _036_ = _024_ & counter[1];
  assign _037_ = _025_ & _030_;
  assign _038_ = _025_ & counter[1];
  assign _039_ = _026_ & _030_;
  assign _040_ = _026_ & counter[1];
  assign _041_ = _027_ & _030_;
  assign _042_ = _027_ & counter[1];
  assign _043_ = _028_ & _030_;
  assign _044_ = _028_ & counter[1];
  assign _045_ = _029_ & _030_;
  assign _046_ = _029_ & counter[1];
  assign _047_ = ~ counter[0];
  assign _048_ = _031_ & _047_;
  assign _049_ = _031_ & counter[0];
  assign _050_ = _032_ & _047_;
  assign _051_ = _032_ & counter[0];
  assign _052_ = _033_ & _047_;
  assign _053_ = _033_ & counter[0];
  assign _054_ = _034_ & _047_;
  assign _055_ = _034_ & counter[0];
  assign _056_ = _035_ & _047_;
  assign _057_ = _035_ & counter[0];
  assign _058_ = _036_ & _047_;
  assign _059_ = _036_ & counter[0];
  assign _060_ = _037_ & _047_;
  assign _061_ = _037_ & counter[0];
  assign _062_ = _038_ & _047_;
  assign _063_ = _038_ & counter[0];
  assign _064_ = _039_ & _047_;
  assign _065_ = _039_ & counter[0];
  assign _066_ = _040_ & _047_;
  assign _067_ = _040_ & counter[0];
  assign _068_ = _041_ & _047_;
  assign _069_ = _041_ & counter[0];
  assign _070_ = _042_ & _047_;
  assign _071_ = _042_ & counter[0];
  assign _072_ = _043_ & _047_;
  assign _073_ = _043_ & counter[0];
  assign _074_ = _044_ & _047_;
  assign _075_ = _044_ & counter[0];
  assign _076_ = _045_ & _047_;
  assign _077_ = _045_ & counter[0];
  assign _078_ = _046_ & _047_;
  assign _079_ = _048_ ? mosi : data_register[0];
  assign _080_ = _049_ ? mosi : data_register[1];
  assign _081_ = _050_ ? mosi : data_register[2];
  assign _082_ = _051_ ? mosi : data_register[3];
  assign _083_ = _052_ ? mosi : data_register[4];
  assign _084_ = _053_ ? mosi : data_register[5];
  assign _085_ = _054_ ? mosi : data_register[6];
  assign _086_ = _055_ ? mosi : data_register[7];
  assign _087_ = _056_ ? mosi : data_register[8];
  assign _088_ = _057_ ? mosi : data_register[9];
  assign _089_ = _058_ ? mosi : data_register[10];
  assign _090_ = _059_ ? mosi : data_register[11];
  assign _091_ = _060_ ? mosi : data_register[12];
  assign _092_ = _061_ ? mosi : data_register[13];
  assign _093_ = _062_ ? mosi : data_register[14];
  assign _094_ = _063_ ? mosi : data_register[15];
  assign _095_ = _064_ ? mosi : data_register[16];
  assign _096_ = _065_ ? mosi : data_register[17];
  assign _097_ = _066_ ? mosi : data_register[18];
  assign _098_ = _067_ ? mosi : data_register[19];
  assign _099_ = _068_ ? mosi : data_register[20];
  assign _100_ = _069_ ? mosi : data_register[21];
  assign _101_ = _070_ ? mosi : data_register[22];
  assign _102_ = _071_ ? mosi : data_register[23];
  assign _103_ = _072_ ? mosi : data_register[24];
  assign _104_ = _073_ ? mosi : data_register[25];
  assign _105_ = _074_ ? mosi : data_register[26];
  assign _106_ = _075_ ? mosi : data_register[27];
  assign _107_ = _076_ ? mosi : data_register[28];
  assign _108_ = _077_ ? mosi : data_register[29];
  assign _109_ = _078_ ? mosi : data_register[30];
  assign counter = _137_;
  assign data_valid_reg = _138_;
  assign data_output_register = _139_;
  assign addr_output_register = _140_;
  assign data_register = _141_;
  assign addr_register = _142_;
  assign state = _143_;
  assign addr = addr_output_register;
  assign dataout = data_output_register;
  assign data_valid = data_valid_reg;
endmodule

module tt_um_cejmu_riscv(clk, ena, rst_n, ui_in, uio_in, uo_out, uio_out, uio_oe);
  wire [7:0] _0_;
  wire [7:0] _1_;
  wire _2_;
  wire [31:0] _3_;
  wire [13:0] _4_;
  wire _5_;
  wire [13:0] _6_;
  wire [31:0] _7_;
  wire _8_;
  input clk;
  wire clk;
  wire [31:0] cpu_data_out;
  input ena;
  wire ena;
  wire reset;
  input rst_n;
  wire rst_n;
  wire [31:0] spi_data_out;
  input [7:0] ui_in;
  wire [7:0] ui_in;
  input [7:0] uio_in;
  wire [7:0] uio_in;
  output [7:0] uio_oe;
  wire [7:0] uio_oe;
  output [7:0] uio_out;
  wire [7:0] uio_out;
  output [7:0] uo_out;
  wire [7:0] uo_out;
  assign _1_ = _0_ & cpu_data_out[23:16];
  assign _2_ = ~ rst_n;
  assign _0_ = cpu_data_out[15:8] & cpu_data_out[31:24];
  cpu cpu_inst (
    .addr_out(_4_),
    .clk(clk),
    .data_in(spi_data_out),
    .data_out(_3_),
    .reset(reset),
    .write_en(_5_)
  );
  spi_slave spi_slave_inst (
    .addr(_6_),
    .cs(ui_in[1]),
    .data_valid(_8_),
    .dataout(_7_),
    .mosi(ui_in[0]),
    .sclk(clk)
  );
  assign cpu_data_out = _3_;
  assign spi_data_out = _7_;
  assign reset = _2_;
  assign uo_out = cpu_data_out[7:0];
  assign uio_out = cpu_data_out[15:8];
  assign uio_oe = _1_;
endmodule
